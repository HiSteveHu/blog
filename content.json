{"meta":{"title":"HiSteveHu","subtitle":"SteveHu's Personal Official Website - 史蒂夫个人官方网站","description":"SteveHu's Personal Official Website - 史蒂夫个人官方网站","author":"Steve Hu","url":"https://histevehu.com","root":"/"},"pages":[{"title":"关于","date":"2019-08-13T10:13:22.000Z","updated":"2019-08-13T14:34:58.388Z","comments":true,"path":"about/index.html","permalink":"https://histevehu.com/about/index.html","excerpt":"","text":"关于 HiSteveHu.com 诞生于2018年8月13日，地球 属于Steve Hu的个人官方网站 里面展示了一些实用的教程、配置经验，有趣的实验，经典的问题和许多有趣的内容 另外，欢迎访问！ 关于 Steve Hu 诞生于20世纪末，地球 HiSteveHu.com的维护者 高尚，自由 摄影，计算机，小提琴，德语"},{"title":"Categories","date":"2019-08-13T10:13:13.000Z","updated":"2019-08-13T16:04:19.600Z","comments":false,"path":"categories/index.html","permalink":"https://histevehu.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2019-08-13T10:12:32.000Z","updated":"2019-08-13T16:04:30.397Z","comments":false,"path":"tags/index.html","permalink":"https://histevehu.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Ubuntu 常用指令操作&问题解决方案收集","slug":"Ubuntu-Common-Instruction-Collection","date":"2020-02-13T08:22:11.000Z","updated":"2020-02-17T07:05:29.246Z","comments":true,"path":"2020/02/13/Ubuntu-Common-Instruction-Collection/","link":"","permalink":"https://histevehu.com/2020/02/13/Ubuntu-Common-Instruction-Collection/","excerpt":"长期收集更新关于Ubuntu的常用指令操作和问题解决方案","text":"长期收集更新关于Ubuntu的常用指令操作和问题解决方案 常用指令操作 文件操作 进入目录 cd PATH 进入根目录 cd /进入当前用户身份所在的主目录 cd ~返回上级目录 cd .. 查看当前路径 pwd 查看目录内容 ls 查看全部内容（包含隐藏文件） ls -a 新建文件 touch FILENAME 新建文件夹 mkdir FOLDERNAME 使用 vi 打开文件 vi FILENAME 复制 cp ORIPATH TARGETPATH 移动 mv ORIPATH TARGETPATH注意：必须在要移动的文件的目录下执行该命令，而且该文件夹下不能有文件夹，我的part2文件夹放在home目录下 删除 rm X PATH1 PATH2 ... X参数： -i 逐个确认要删除的文件 -r 递归删除目录下内容，**删除文件夹时必须添加** -f 强制删除，忽略不存在的文件，无确认提示 -rf 强制删除目录，无提示 更改权限 sudo chmod X X参数： 600 （只有所有者有读和写的权限） 644 （所有者有读和写的权限，组用户只有读的权限） 700 （只有所有者有读和写以及执行的权限） 666 （每个人都有读和写的权限） 777 （每个人都有读和写以及执行的权限） 包管理apt X X参数： install 安装软件包 remove 移除软件包 purge 移除软件包及配置文件 update 刷新存储库索引 upgrade 升级所有可升级的软件包 autoremove 自动删除不需要的包 full-upgrade 在升级软件包时自动处理依赖关系 search 搜索应用程序 show 显示安装细节 list 列出包含条件的包（已安装，可升级等） vi 编辑、命令行模式切换 i/esc 保存 命令模式，w 退出 命令模式，q 保存退出 命令模式，wq","categories":[{"name":"Ubuntu","slug":"Ubuntu","permalink":"https://histevehu.com/categories/Ubuntu/"}],"tags":[{"name":"整理","slug":"整理","permalink":"https://histevehu.com/tags/整理/"}]},{"title":"Unity:Playground框架入门","slug":"Unity-Playground-Practice","date":"2020-02-08T02:04:18.000Z","updated":"2020-02-09T07:34:59.961Z","comments":true,"path":"2020/02/08/Unity-Playground-Practice/","link":"","permalink":"https://histevehu.com/2020/02/08/Unity-Playground-Practice/","excerpt":"Unity的Playground是一个用来制作拥有物理引擎的2D游戏开发框架，非常适合初学者。在这里，我们将用它来制作一个简单的飞船小游戏以快速入门。","text":"Unity的Playground是一个用来制作拥有物理引擎的2D游戏开发框架，非常适合初学者。在这里，我们将用它来制作一个简单的飞船小游戏以快速入门。 前导教程如果你第一次阅读本文且之前无相关Unity使用经验，建议阅读以下前导教程后再开始着手开始此教程。 Unity:制作小球滚动游戏 前言 游戏构思是，通过键盘操作键盘方向键操控飞船移动，躲避或者按空格键发射激光以摧毁小行星，同时收集星星。撞击小行星会丢失生命值。当生命值为0时，游戏失败。当收集到所有星星时（即分数满分时），游戏胜利。 准备 创建项目创建游戏的过程和上一节中的创建方式一样，只是要将游戏设置为2D，这里我们创建一个名为Playground2D的游戏项目。 引入Playground框架为了使用Playground框架，需要在Asset Store中搜索Unity Playground并下载引入其资源包。 在顶部菜单栏的Window中选择Asset Store即可进入资源商店，搜索找到Unity Playground选择下载（Download）然后引入（Import）。 引入成功后，可以看到Playground框架已经为我们准备了很多资源，主要的资源集中在Scripts，打开这个文件夹可以发现很多已经写好的可以直接使用的脚本。 正式开始 背景将SampleScene重命名为MainScene并保存于Scenes目录下，保留Main Camera。 选择Assets-&gt;Images-&gt;Backgrounds下的BG_Space背景图，拖动到Hierarchy面板中。在Inspector面板中的Sprite Renderer（着色器）中将起Draw Mode（绘制模式）改为Tiled（平铺），还可以扩大它的大小，这里将其X、Y的Size值均设置为100。然后展开Visibility Options（可视化选项），将Sorting Layer（排布布局）设置为Background（背景），这样可以使得其他所有的GameObject均在其上方。 添加飞船选择Assets-&gt;Images-&gt;Spaceships下的一个图像作为Player，这里选择了一个红色的飞船，并将其拖动到Hierarchy面板中。在Inspector面板中，为了让飞船实现碰撞等物理效果，为其添加刚体属性，只不过这里我们选择添加Rigidbody 2D，即选择Add Component，找到或者搜索该Component之后添加。 显然，我们需要将它的Gravity（重力）置零，为了不让其在受到一小点点的力后运动起来停不下来，将其Friction（摩擦力）设置一个合理的值，这里设置为2，Angular Friction（角摩擦）可以保持0.05的预设值。 接下来就可以体会到Playground框架的强大之处，因为它预先为我们准备了各种各样的脚本。运用这些脚本可以直接实现很多游戏情景，而我们要做的只是将对应的脚本添加给对应的GameObject，并且设置脚本需要的public属性的值，也就是在Inspector面板中设置这些值即可。 首先，为了让飞船能够运动起来，为其添加一个推动力的脚本：Move With Arrows，你可以选择从Assets中的Scirpts目录下找到这个脚本拖动到Inspector面板中，也可以在Add Component中直接搜索添加该脚本。然后更改控制方式为Arrow Keys（方向键），Push Strength（推力大小）为适当的值，这里置为3，勾选 Orient to direction。此时运行游戏可以通过按方向键（↑↓←→）使飞船运动起来。 这里还给飞船增加了一点儿可爱的属性，找到Assets-&gt;Prefabs-&gt;Particles下的P_Flame，拖动到Hierarchy成为飞船的子物体，让其跟随飞船运动，然后通过选择和平移调整一个合适的位置加到飞船的尾部。 设置Camera设置Camera，调整Size，改变其视野范围，并添加一个Follow脚本使其固定跟随一个物体，直接点击Camera中的Add Camera Follow script即可添加，然后将我们的Player也就是飞船拖动到Target作为其参数即可。 添加小行星选择Assets-&gt;Images-&gt;Asteroids下的一个小行星图像作为障碍物，同样需要为其添加Rigidbody 2D属性，修改其中的值 在物理学中我们知道，如果一个物体没有受到任何摩擦力，在其受到一个力从而获得一个初速度后会一直以这个速度运动下去，所以为了避免这种情况的发生，我们还是需要为其Friction（摩擦力）赋予一个合理的值 添加Collider为了有碰撞效果，为飞船和石头均添加 Polygon Collider 2D 属性。此时运行游戏，会发现飞船可以碰撞石头 添加生命值为飞船添加一个Health System（健康系统），直接添加Health System脚本即可，可以看到，我们可以预设生命值。 飞船碰撞到了石头，飞船的生命值就减少一，这需要我们为石头添加Modify Health脚本，然后看到有两个可选参数，第一个Destroy When Activated（起作用时销毁）如果选中的话就会在石头起到“减血”作用后销毁石头，这里不选中，第二个Health Change即为对生命值的变化，这里设置为-1很合理。 添加UI为了让生命值和分数显示出来，我们为Hierarchy目录添加Assets下的Prefabs下的UserInterface，UI自动显示在了游戏界面中。 为了让Untiy清楚生命值和分数都记录的是谁的，这里需要为飞船添加一个Player的Tag，添加Tag详见前导教程。 添加激光武器为了不让我们的飞船显得太过于脆弱，为其添加发射激光的功能。 这里选择Assets-&gt;Images-&gt;Projectiles下的LasersMid作为发射的激光，拖动到Hierarchy下。 为其添加Rigidbody 2D和capsule Collider 2D（胶囊状的碰撞器）使其拥有碰撞属性，正如前导教程中所提到的，还需要选中Is Trigger一项。 Playground框架为我们准备了Bullet（子弹）脚本使其在特定条件下产生一个该对象的引用，即发射一发子弹。 添加了Bullet脚本后的激光束，将其拖动回Assets下的Prefabs目录下成为一个预设体。 有了激光，还需要一个发射的枪口，我们在飞船下新建一个空的子物体，将其命名为Gun，将其拖动至飞船的顶部也就是发射的地方。 为刚创建的Gun添加一个Object Shooter的脚本，在Inspector面板中设置其参数。Prefab To Spawn（要发射的预设体）里拖动我们已有的Prefab下的子弹预设体到这里作为参数，Key To Press是发射的按键，这里设置为空格键，Creation Rate是产生的速度，这里设置为0.1，Shoot Speed为发射速度，这里设置为17，shoot Direction为发射方向，显然是沿Y方向发射，所以将X设为0，Y设为1。勾选 Relative to Rotation。 射击中石头时石头就需要消失并且我们要得分，所以为石头再添加一个脚本：Destory For Points，这个脚本使得物体被击中时销毁并为我们的Player增加分数，Points Worth即其所价值的分数，这里我们设置为0，因为并不想在击中石头后得到分数。 添加星星为游戏添加一些在太空中漂浮的星星，用我们驾驶的飞船去收集这些星星，收集到的外星人就进入飞船（消失） 选择Assets-&gt;Images-&gt;GameElements下的Star，它需要拥有以下的Component： 再添加一个Collectable（可收集的）脚本，这个脚本表示这是一个可以被收集的物体，Points Worth表示收集到后得到的分数，这里默认1不变。 完善场景对小行星和星星进行复制（Duplicate），然后任意摆放。 添加胜利条件到什么时候才算胜利呢？选择UserInterface，在Inspector中的UI Script处可以设置，比如这里默认的为一个玩家、计分制、满分为胜利。以10个星星为例，每个星星我们前面设置为1分，则满分为10分。 大功告成 运行游戏，完美！ 至此游戏的制作大功告成，你可以选择打包生成可执行文件分享给你的好友。打包生成详见前导教程中的分享一节。 另附上游戏的完整工程文件，如果你中途遇到困难可供参考：Playground2D.zip","categories":[{"name":"Unity","slug":"Unity","permalink":"https://histevehu.com/categories/Unity/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"Unity:制作小球滚动游戏","slug":"Unity-Create-Ball-Game","date":"2020-02-02T13:48:08.000Z","updated":"2020-02-08T11:06:28.036Z","comments":true,"path":"2020/02/02/Unity-Create-Ball-Game/","link":"","permalink":"https://histevehu.com/2020/02/02/Unity-Create-Ball-Game/","excerpt":"这里我们将以制作一个小球滚动的游戏为例，以快速熟悉Unity的常用界面操作概念、入门Unity。","text":"这里我们将以制作一个小球滚动的游戏为例，以快速熟悉Unity的常用界面操作概念、入门Unity。 前言 游戏构思很简单，在一个平面内，通过键盘操作小球滚动击中上面的立方体以获得分数并显示在左上角。当玩家击中全部的立方体之后，跳转到另一个界面提示游戏完成，玩家胜利，并附有重新开始游戏的按钮。 通过这个学习，你将会主要掌握： Unity中一些基本知识 常用组件的控制（移动、旋转、设定颜色及材质） 摄像机的简单跟踪 简单碰撞判断原理 注意： 本文需要基本C#语言基础，如果你没有学习过这门语言可以事先学习一下再开始这个教程。别担心，很简单 本文基于Unity 2019.3.0f6 ，外部代码编辑器为 Visual Studio 2019 让我们开始吧！ Unity中的一些基本知识 概念 Game Object 游戏对象 Game Object是搭建游戏的最基础的模块，但是任何一个Game Object本身并没有任何作用，其属性以及行为都由这个Game Object所拥有的Components决定 Components 元件 Components从属于Game Object，从而定义了每一个Game Object应该表现哪些行为以及拥有哪些属性 Prefabs 预设体 有些Game Object我们以后可能会经常用到（比如游戏中的墙），如果我们为其设置好了很多Components以及其对应的值，后期需要更改属性的时候，我们肯定不希望每一面墙都重新添加一遍这些Components或重新设置参数值，那么此时我们就可以将一些Game Objects保存成为Prefabs，下次用到可以拿来即用，因为Prefabs可以生成很多的同样的Game Object Prefabs之于Game Object相当于编程中的类之于对象 因而当我们需要生成一个Game Object时，只需要将Project窗口中的相应Prefab拖动到Hierarchy窗口即可完成实例化，生成一个Game Object。（界面视图介绍详见后文） Assets 资产 Assects可以是3D models（3D模型）、audio files（音频文件）、scripts（脚本）等等。（显然，Prefabs也是一种assets）这些资产可以看成是游戏的原材料，构成了我们的游戏 界面 ①Hierarchy 层次管理器 管理各个Game Object的层次结构 ②Project 工程管理器 管理当前工程的Assets ③Scene 场景视图 通过Scene视图对整个游戏的所有Game Object（如地图、道具、角色等）进行一些操作，比如拖动任何一个可动的元素，调整其位置角度大小；改变观看这个世界的角度、远近等。称这个模式为Edit模式。 ④Game 游戏视图 Game窗口所展示的内容即玩家看到的内容，因而尽管我们可以在Scene窗口中随意变化观察的角度，但是Game窗口的内容却只取决于Camera所看到的内容。同时如果运行游戏的话还可以在Game窗口中直接“玩”我们的游戏，从而达到调试的目的。 ⑤Inspector 属性 列出了所选中的Game Object的所有Components，这里可以对它们进行管理并且更改参数值 ⑥Console 终端 控制台所打印的信息，可以用来调试C#脚本或者其他内容 你的视图可能与截图有所不同，这里仅仅以我们所常用的视图结构为例 正式开始 前面我们已经简单介绍了Unity的一些基本概念，这里我们将正式开始游戏的制作 打开Unity，新建一个3D工程。我们会看到Unity已经事先为我们新建了两个Game Object: Main Camera和Directional Light，保留它们，后文将会用到 然后在Project窗口，新建以下文件夹为后续工作准备：Materials, Prefabs, Scenes, Scripts 至此，你的层次结构和工程资产应该如下： 添加&amp;设置游戏对象 地面Hierarchy窗口，右键，3D Object，Plane 然后在Inspector窗口将Plane重命名为Ground，在Transform选项卡中，点选项卡的右上角省略号，Reset，重置平面的位置及大小 接下来，我们要为地面添加材质颜色 在Project窗口中，进入Materials文件夹，右键，Create，Material，这时会生成一个材质球并等待命名，我们将它命名为background。然后在Inspector中将Albedo（反射率）设成自己喜欢的颜色（这里以RGB（0,32,64）为例），然后将材质球拖动到Scene窗口的Ground对象上以将材质球应用。 球Hierarchy窗口，右键，3D Object，Sphere 然后在Inspector窗口将Sphere重命名为Player，在Transform选项卡中，点选项卡的右上角省略号，Reset，重置平面的位置及大小，然后将Position属性的Y设置为0.5 因为小球会遇到碰撞等事件，为了模拟物理属性，我们需要为其添加相应的Components。在Inspector窗口，点击最底部的Add Component，输入Rigidbody以添加 墙正如最终游戏截图所示，我们计划在平面四周各建立墙体以防止玩家的小球脱离平面坠落。当然你也可以跳过这一步，如果你想让游戏更惊险刺激。但在这里我们将会使用Prefab进行建造，后文也将用到这一重要概念，因此我们强烈建议你不要跳过 Hierarchy窗口，右键，3D Object，Create Empty，创建一个空的Game Object，用以当作墙体集合，重命名为Walls，然后在Walls对象上右键，3D Object，Cube，在Inspector窗口调整大小以符合地面边长并重命名为wall，这样wall就成为了Walls的子对象 然后将wall拖动到Project窗口的Prefabs文件夹，将会自动创建wall对象的prefab，同时wall对象会变成蓝色，证明创建成功 Ctrl+D快速复制出剩余三个墙体并移动摆放好位置 立方体立方体与墙体构造方法类似。先创建一个空对象，命名为Cubes作为集合。然后在其中新建Cube，命名为cube，拖动到Project窗口的Prefab文件夹以生成预设体。然后Ctrl+D快速复制若干个立方体并摆好位置 为了美观，我们可以为立方体们设置材质颜色。在Materials文件夹内新建材质命名为cube，设置Albedo为你喜欢的颜色（这里随机以黄色为例）。因为我们使用预制体构建，所以上色十分方便。只要在Project窗口中选中cube预制体，双击进入编辑模式，将材质球拖动到预制体上即可。 如游戏设计思路所言，我们需要控制小球击中立方体以获得分数，因此我们也要像小球一样，为立方体设置刚体的物理属性。在Inspector窗口，点击最底部的Add Component，输入Rigidbody，为cube预制体添加刚体属性 然后点击Scene导航条的Scenes场景退出编辑模式，然后我们会发现所有立方体已经成功添加了材质球和刚体属性 到这里，我们已经完成了游戏所需要的所有Game Object的添加和设置工作。 代码，魔法 试着运行一下游戏，很好，所有的对象都出现在Game窗口里，但无法使用键盘控制小球移动。接下来我们需要添加一些代码来实现这个目标。 球的移动我们在Scripts文件夹下来管理代码，在该目录处右键，Create，C# Script创建一个脚本并命名为PlayerController。然后我们需要将这个脚本与小球Player关联起来。选择Player，在Inspector面板下选择Add Component，在其中搜索我们的脚本名字就可以找到该脚本完成绑定。 双击脚本文件，自动调用外部编辑器打开（推荐使用Visual Studio，这里以2019版本为例） 123456789101112131415161718using System.Collections;using System.Collections.Generic;using UnityEngine;public class PlayerController : MonoBehaviour&#123; // Start is called before the first frame update void Start() &#123; &#125; // Update is called once per frame void Update() &#123; &#125;&#125; Unity已经为我们预置好了脚本的结构，最基本的，我们可以看到所有的Unity脚本都继承自MonoBehaviour类，然后有两个预设函数，Start函数是在第一帧开始渲染前调用，Update函数在每一帧刷新前调用，都是非常常用的函数 接下来思考我们要做的事情，我们需要检测用户的输入，并且通过输入的按键来控制小球的滚动方向，检测用户的输入同时也需要识别输入的是哪一个按键，除此之外我们还需要一些物理学有关的逻辑，比如我们需要添加一个力来控制小球的移动，这就是物理学逻辑，这些逻辑当然是每一帧都要进行一次，所以我们需要将这些逻辑写在每一帧更新都要执行的函数中显然我们可以写到Update函数下，因为Update函数是每一帧刷新前都会调用的，同时我们还有另外的选择，即使用FixedUpdate函数，它在每一次进行物理学运算的时候调用，每次检测到用户输入都需要进行物理学运算，所以我们可以将逻辑写到FixedUpdate函数下 首先我们需要创建一个对于这个Player小球的引用，这样才能知道我们控制的是哪个小球，这里小球是刚体，所以我们创建一个刚体（Rigidbody）的引用，并且需要在第一帧开始渲染之前通过GetComponent方法来找到小球创建刚体的引用，这一逻辑自然就需要写到Start函数中了 123456private Rigidbody rigidbodyPlayer;void Start()&#123; rigidbodyPlayer = GetComponent&lt;Rigidbody&gt;();&#125; 接下来对用户输入的读取就需要写到FiexedUpdate函数中了，我们使用Input类的GetAxis方法来获取水平或者垂直的运动轴，这个方法会返回一个float值作为该轴的移动距离 12float moveHorizontal = Input.GetAxis(&quot;Horizontal&quot;);float moveVertical = Input.GetAxis(&quot;Vertical&quot;); 通过以上两行代码我们就可以将用户的W，S，A，D输入转化为水平轴和垂直轴的移动距离，分别存储在moveHorizontal和moveVertical两个float类型的变量中 接下来通过Rigidbody类的AddForce方法可以为刚体添加作用力，AddForce方法接受一个三维向量（Vector3）参数，这个三维向量就可以表示力，显然我们的三维向量可以用刚才的moveHorizontal和moveVertical两个变量作为X值和Z值，同时我们是不需要小球在Y方向上移动的，也就是将Y方向的力作用设置为0.0f即可，经过调试我们会发现小球的移动速度过慢，为了方便调节小球的速度，只需要在表示力的三维向量前乘以一个倍数即可，为了方便调整，我们设置一个public的float类型的变量speed来调节这个乘积另外，凡在Unity的脚本中被声明为public类型的变量，在Unity的Inspector界面中的该脚本的Component下都会出现一个可以设置的值的方框 123456public float speed;void FixedUpdate()&#123; Vector3 movement = new Vector3(moveHorizontal,0.0f,moveVertical); rigidbodyPlayer.AddForce(movement*speed);&#125; 这里我们将speed的值设为10，运行游戏就会发现通过W，S，A，D的控制，小球动了起来 摄像机的跟踪可以发现，我们的Camera的角度和位置都比较刁钻，这导致我们的游戏看到的画面并不完整，接下来我们对Camera进行设置，使其能够跟随我们的小球滚动来同时移动 首先调节Main Camera的Position和Rotation使得画面和角度比较合适 接下来通过脚本控制Main Camera跟随小球Player一同移动，即在Position上保持相对静止 可能你会想到，只需要将Main Camera拖动给Player使其成为Player的子物体不就可以保持两者相对位置不变化了吗？但是问题在于球体Player是滚动的，如果两者的位置完全相对静止，就会导致球滚动时Main Camera也会跟着球滚动，产生天旋地转的感觉。 新建脚本CameraController并添加给Main Camera做一个Component。为了使Main Camera的Transform的Position和Player的保持相对静止，Rotation并不和其保持一致，可以想到一个办法：设置一个偏移量，这个值初始化为游戏开始时Main Camera和Player之间的Position的差值，然后在球滚动时，每一次滚动都改变Main Cmaera的Position，使其新的Position等于现在球的Position的值加上刚才的偏移量，这样就会在每次球的位置改变时Main Camera都会跟上它的步骤显然，偏移量的设置需要在Start函数中完成，每一次球的位置发生变化时的逻辑可以在Update函数中完成，但还有一个更好的选择，就是LateUpdate函数，该函数在每次有GameObject发生变动时才会调用。同时，我们的脚本使加在Main Camera上的，所以Main Camera的Transform可以直接调用，但是球的Transform则需要单独获取，这里我们设置一个public的GameObject量，然后在Unity中将球Player拖动到这个量处作为参数即可 123456789101112private Vector3 offset;public GameObject player;void Start()&#123; offset = transform.position - player.transform.position;&#125;void LateUpdate()&#123; transform.position = player.transform.position + offset;&#125; 这时候运行游戏就可以发现Main Camera的位置随着球的改变而发生了改变 立方体的旋转我们已经在地面上放置了若干个立方体，为了增强视觉效果可以让它们原地缓缓旋转。当然你也可以跳过这一小节。 新建脚本Rotator，并添加给预设体cube，编辑此脚本。这个逻辑中是不需要Start函数的，我们只需要每一帧都让小方块儿转动一下，所以将逻辑写到Update函数中，这里使用Ratate方法，需要一个Vector3作为参数。为了不让旋转过快，我们给每一帧都乘以一个小的时间量 123456private Vector3 rotation = new Vector3(15,30,45);void Update()&#123; transform.Rotate(rotation * Time.deltaTime);&#125; 保存脚本，运行游戏可以看到小方块旋转起来了。 碰撞如果小球碰撞了旋转的立方体，那么立方体就会消失。那么如何识别我们的小球Player碰撞的是立方体呢？我们通过为预设体cube添加特定的标签来识别。在Assets的Prefabs中找到我们的cube并打开它，可以在它的Inspector面板中发现它还没有添加标签（Untagged），点击Tag后的按钮选择Add Tag…，来添加一个名为cube的标签，然后再回到最开始的面板处选择新添加的这个标签，这样cube的标签就添加好了。 重新打开PlayerController脚本，这里我们将碰撞发生的逻辑写到函数OnTriggerEnter中，这个函数在发生碰撞事件的时候调用，而且用碰到的Collider（碰撞机）作为参数，也就是我们的Player碰到的Collider。可见，如果要检测到的碰撞，被碰撞的物体需要由碰撞引擎，也就是要有Collider的属性，其实我们会发现，作为cube保存的一个Prefab在创建之初就已经有Box Collider的这一Component了，所以不再需要我们自己添加。 但是我们需要勾选上Is Trigger选项 这里的原因需要我们了解一定的Unity碰撞原理。Unity将Collider（碰撞机）分为静态碰撞机（Static Collider）和动态碰撞机（Dynamic Collider）两种。 静态的碰撞机比如墙面、地板等一些列静态的物体，与他们碰撞时，不允许两个Collider相互重合，也就是说会发生反弹。 而为了让我们的碰撞能够实现（碰撞后立方体消失），我们需要将立方体设置为动态的（Trigger）触发器，成为Trigger的Collider是可以被穿过的，这样才会引发我们的“碰撞事件”的逻辑。这里我们找到预设体cube，在它的Box Collider的Component中，勾选Is Trigger选项，这样它就成为了一个动态触发器。 OnTriggerEnter函数用其碰撞到的Collider作为参数，现在就需要我们识别这个碰到的Collider是不是一个cube立方体了，显然可以使用Tag来鉴别。这里使用gameObject的CompareTag方法来完成。该方法以一个字符串作为参数，返回一个布尔值，如果gameObject的Tag和字符串一致，就返回true。接下来完成控制小立方体消失的逻辑，使用gameObject的方法SetActive来完成。这个方法接受一个布尔值作为参数来控制GameObject的消失与显现。作用同我们在Inspector面板中看到的每一个GameObject前的小对勾相同。 1234567void OnTriggerEnter(Collider other)&#123; if (other.gameObject.CompareTag(&quot;cube&quot;)) &#123; other.gameObject.SetActive(false); &#125;&#125; 计数器接下来添加一个计数器，每撞到一个小球就使计数器数值增加1。自然需要编辑PlayerController脚本，声明一个int类型的变量，在Start函数中初始化为0，在每一次碰撞到小立方体后都增加一。这里特地将count每次更新后的值都打印到控制台来验证其正确性。 123456789101112131415private int count;void Start()&#123; rigidbodyPlayer = GetComponent&lt;Rigidbody&gt;(); count = 0;&#125;void OnTriggerEnter(Collider other)&#123; if (other.gameObject.CompareTag(&quot;cube&quot;)) &#123; other.gameObject.SetActive(false); count++; Debug.Log(count); &#125;&#125; 但显然，将分数显示在游戏界面中才是更好的选择，这里需要用到UI组件。在Hierarchy窗口中，右键，UI，Text，就会创建一个UI组件，但是我们会发现其实Text外还有一层Canvas（画布），下方还出现了一个EventSystem，这些都是Unity为我们自动创建的，这是因为： The single most important thing to know about these additional items is that all UI elements must be the child of a canvas to behave correctly. （所有的UI元素都必须是一个Canvas（画布）的子元素才能正常工作） 这里将Text命名为CountText。接下来我们来调整它的位置。 找到Inspecctor的Rect Transform，可以看到UI的Transform和一般GameObject的定位方式不同，这个位置的确定是相对于游戏屏幕的，点击左边的这个方框，展开位置选择的面板，根据提示：按住Shift键选择中心轴（pivot），按住Alt键选择位置（position）。我们选择同时按住Shift和Alt键，将Text放到Canvas的左上角： 这样就可以看到Count Text放置到了Game窗口的左上角。接下来可以改变Rect Transform的Pos X的值和Pos Y的值让Count Text稍微离左边缘和顶部边缘一段距离 接下来要将分数显示到Text中，继续编辑PlayerController脚本，首先需要添加新的Namespace： 1using UnityEngine.UI; 然后自然需要创建一个Text变量来表示CountText的一个引用，我们将此Text变量声明为public的类型，为了可以在Inspector中对其进行直接的赋值。接下来要初始化CountText中所显示的文字，使用Text的text变量即可，在Start函数中进行初始化，然后再每一次碰撞到小立方体的时候再重新更新Text的内容 12345678910111213141516public Text countText;void Start()&#123; rigidbodyPlayer = GetComponent&lt;Rigidbody&gt;(); count = 0; countText.text = &quot;Count: &quot; + count.ToString();&#125;void OnTriggerEnter(Collider other)&#123; if (other.gameObject.CompareTag(&quot;cube&quot;)) &#123; other.gameObject.SetActive(false); count++; countText.text = &quot;Count: &quot; + count.ToString(); &#125;&#125; 保存脚本回到Unity，将CountText拖动到Inspector中新产生的这个Text变量处来实例化它即可。 运行游戏，很好！ 至此，游戏的主体部分已经完成。但按照最初的游戏设想，在完成游戏后会跳转到另一个界面提示游戏完成，玩家胜利，并附有重新开始游戏的按钮。让我们继续！ 最后的胜利 在Project的Scene文件下，右键，Create，Scene，并命名为Finish。这将创建一个新的场景。（你同时也可以将之前我们所进行的一系列操作的场景在Assets中找到并移动到Scene文件中方便管理） 然后我们需要将新场景添加到构建列表中。点击菜单File，Build Settings，添加我们的两个场景。 双击finish打开场景编辑。在Hierarchy窗口中，右键，UI，分别创建一个Text和Button。调整好颜色和位置。值得注意的是，按钮的文本内容位于Button的子对象中，需要对其的Inspector中属性进行调整以调整按钮的文本。 我们可以在Button的Inspector窗口的Button选项卡中更改按钮的外观细节。 接下来需要对原来的PlayController脚本进行小修改。在满足玩家将所有立方体都撞击的条件后（即分数point等于满分，比如这里因为共设置了8个立方体，每个立方体分数均为1分，所以总分为8分），跳转到我们新建的用于显示游戏胜利信息的新场景。跳转场景需要我们引入新的命名空间 1using UnityEngine.SceneManagement; 然后我们需要修改OnTriggerEnter函数内容。 123456789101112void OnTriggerEnter(Collider other) &#123; if (other.gameObject.CompareTag(&quot;cube&quot;)) &#123; other.gameObject.SetActive(false); point++; pointText.text = &quot;Count: &quot; + point.ToString(); Debug.Log(point); if (point == 8) SceneManager.LoadScene(&quot;Finish&quot;); &#125; &#125; 试着运行一下游戏，到这里我们已经能完成游戏结束后从游戏场景跳转到Finish场景，接下来我们需要对Finish场景的按钮添加代码来跳转到游戏场景以实现重现开始 新建脚本PlayAgain，并添加给按钮，编辑此脚本。首先在我们需要在Start函数中添加一个按钮的监听器以监听按钮的点击事件，绑定一个自定义函数OnClick。然后添加自定义函数OnClick，在其中完成场景跳转功能。 123456789101112131415using UnityEngine;using UnityEngine.UI;using UnityEngine.SceneManagement;public class PlayAgain : MonoBehaviour&#123; void Start() &#123; this.GetComponent&lt;Button&gt;().onClick.AddListener(OnClick); &#125; void OnClick() &#123; SceneManager.LoadScene(&quot;BallMove&quot;); &#125;&#125; 运行游戏，完美！ 分享至此游戏的制作大功告成。如果你想把自己的游戏分享给你的朋友，可以选择打包生成 点击菜单File，Build Settings，确认所有需要的场景均被勾选。在下面选择目标平台及相关设置，点击Build按钮即可 另附上游戏的完整工程文件，如果你中途遇到困难可供参考：BallMoveGame.zip","categories":[{"name":"Unity","slug":"Unity","permalink":"https://histevehu.com/categories/Unity/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"OpenGL-3:点和直线","slug":"OpenGL-PointandLine","date":"2020-01-20T09:52:35.000Z","updated":"2020-01-29T02:30:01.814Z","comments":true,"path":"2020/01/20/OpenGL-PointandLine/","link":"","permalink":"https://histevehu.com/2020/01/20/OpenGL-PointandLine/","excerpt":"导言在之前的教程中，我们已经实现了空窗口以及三角形的渲染。然而只是略知一二，对于渲染的具体细节，比如三角形边的绘制，我们还不太清楚。从这节开始，我们将更加深入、系统地入门图形学，先从点和直线开始","text":"导言在之前的教程中，我们已经实现了空窗口以及三角形的渲染。然而只是略知一二，对于渲染的具体细节，比如三角形边的绘制，我们还不太清楚。从这节开始，我们将更加深入、系统地入门图形学，先从点和直线开始 概念光栅化（扫描转换）分为两步(以三角形为例)： 输入三角形的定义:（1）几何信息：三个顶点的坐标（2）属性信息：颜色、光照、纹理等。 根据图形的定义在点阵单元上确定最佳逼近于图形的像素集。逼近的过程本质可以认为是连续量向离散量的转换 给像素指定合适的颜色值 直线扫描转换算法分类逐点比较法、正负法、数值微分算法、Bresenham算法 接下来，我们主要了解数值微分算法 数值微分法（Digital Differential Analyzer,DDA）理论$$\\begin{cases} x_{i+1}=x_i+\\varepsilon\\cdot\\Delta_x \\\\y_{i+1}=y_i+\\varepsilon\\cdot\\Delta_y\\end{cases},精度无限高：\\varepsilon无限小$$ $$令\\varepsilon=\\frac{1}{max(|\\Delta_x|,|\\Delta_y|)}$$ 使得ε△x或ε△y中会有一个变成单位步长。算法在最大位移方向上，每次总是走一步： 情况一：斜率绝对值小于1：ε=1/|△x|,其中对y(i+1)结果四舍五入 $$\\because\\varepsilon\\cdot\\Delta_x=1\\therefore \\varepsilon=\\frac{1}{\\Delta_x}\\\\therefore y_{i+1}=y_i+\\varepsilon\\cdot\\Delta_y=y_i+\\frac{\\Delta_y}{\\Delta_x}=y_i\\pm k$$ 情况二：斜率绝对值大于1：ε=1/|△y|,其中对x(i+1)结果四舍五入 $$\\because\\varepsilon\\cdot\\Delta_y=1\\therefore \\varepsilon=\\frac{1}{\\Delta_y}\\\\therefore x_{i+1}=x_i+\\varepsilon\\cdot\\Delta_x=x_i+\\frac{\\Delta_x}{\\Delta_y}=x_i\\pm \\frac{1}{k}$$ 代码1234567891011121314151617181920void DDALine(int x0,int y0,int x1,int y1)&#123; int dx,dy,eps1,k; float x,y,xIncre,yIncre; dx=x1-x0; dy=y1-y0; x=x0; y=y0; //最大位移方向判断,即得max(|Δx|,|Δy|) If (abs(dx)&gt;abs(dy)) eps1=abs(dx); else eps1=abs(dy); //x、y方向上增量的计算，即得ε×Δd xIncre=(float)dx/(float)eps1; yIncre=(float)dy/(float)eps1; //输出最佳逼近的像素点 for (k=0;k&lt;=eps1;k++) &#123; putpixel((int)(x+0.5),(int)(y+0.5));//在对应坐标处输出像素点 x+=xIncre; y+=yIncre; &#125;&#125;","categories":[{"name":"OpenGL","slug":"OpenGL","permalink":"https://histevehu.com/categories/OpenGL/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"OpenGL-3:渲染三角形","slug":"OpenGL-RenderTriangle","date":"2020-01-20T00:32:05.000Z","updated":"2020-01-20T01:46:42.029Z","comments":true,"path":"2020/01/20/OpenGL-RenderTriangle/","link":"","permalink":"https://histevehu.com/2020/01/20/OpenGL-RenderTriangle/","excerpt":"在这里我们将实现一个三角形的渲染","text":"在这里我们将实现一个三角形的渲染 开始初始化在代码的开始部分，我们依然需要对 OpenGL 进行一个初始化。正如上一节所说的，初始化阶段包括初始化GLFW，窗口， GLAD，视口这四个部分。代码如下： 123456789101112131415161718192021222324252627282930313233343536//窗口尺寸调节视口适应回调函数void framebuffer_size_callback(GLFWwindow* window, int width, int height) &#123; //指定当前视口尺寸(前两个参数为左下角位置，后两个参数是渲染窗口宽、高) glViewport(0, 0, width, height); &#125;int main()&#123; //初始化GLFW int Major, Minor, Rev; glfwInit(); glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); // OpenGL版本为3.3，主次版本号均设为3 glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3); //使用核心模式(无需向后兼容性) glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); //获取版本信息并打印 glfwGetVersion(&amp;Major, &amp;Minor, &amp;Rev); printf(\"GLFW %d.%d.%d initialized\\n\", Major, Minor, Rev); //创建窗口(宽、高、窗口名称) auto window = glfwCreateWindow(800, 600, \"CG_1_helloworld\", NULL, NULL); if (window == nullptr) //如果窗口创建失败，输出信息并退出 &#123; std::cout &lt;&lt; \"Failed to create GLFW window\" &lt;&lt; std::endl; glfwTerminate(); return -1; &#125; glfwMakeContextCurrent(window); //将窗口的上下文设置为当前线程的主上下文 //初始化GLAD，加载OpenGL函数指针地址的函数 if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) &#123; std::cout &lt;&lt; \"Failed to initialize GLAD\" &lt;&lt; std::endl; return -1; &#125; //设置视口大小适应回调函数 glfwSetFramebufferSizeCallback(window, framebuffer_size_callback); &#125; 顶点输入初始化之后，我们需要给出我们三角形的顶点数据，并对数据做出一些处理，包括生成绑定 VAO、VBO和属性设置，最后将其解绑 123456//三角形顶点位置数组const float triangle[] = &#123; -0.5f, -0.5f, 0.0f, // 左下 0.5f, -0.5f, 0.0f, // 右下 0.0f, 0.5f, 0.0f //正上&#125;; 由于我们绘制的是一个三角形，因此我们的顶点数据由三个顶点 组成。这里的顶点数据是标准化的设备坐标，也就是 x,y,z 轴坐标均映射到[-1,1]之间。 数据处理VAO、VBO我们有了顶点数据，接下来就是要将这些顶点数据发送到 GPU中去处理，这里我们生成了一个顶点缓冲对象 VBO，并且将其绑定到顶点缓冲对象上，使用这个顶点缓冲对象的好处是我们不用将顶点数据一个一个的发送到显卡，而是可以借助 VBO一次性的发送一大批数据过去，然后使用 glBufferData 将顶点数据绑定到当前默认的缓冲上 12345678//生成VBO GLuint vertex_buffer_object; glGenBuffers(1, &amp;vertex_buffer_object); //绑定VBOglBindBuffer(GL_ARRAY_BUFFER, vertex_buffer_object); //将顶点数据绑定至当前默认的缓冲中//GL_STATIC_DRAW 表示三角形位置数据不会被改变。 glBufferData(GL_ARRAY_BUFFER, sizeof(triangle), triangle, GL_STATIC_DRAW); 这里我们还需要生成了一个顶点数组对象 VAO，使用 VAO的原因是：首先我们使用的核心模式要求我们需要使用 VAO，其次使用 VAO的好处在于我们在渲染的时候只需要调用一次 VAO 就可以了，之前的数据都对应存储在了 VAO 中，不用再调用 VBO。那么 VAO的生成过程也跟 VBO一样，需要生成再绑定，等到这些操作都完毕，我们可以解绑我们的 VAO，VBO 12345//生成VAO GLuint vertex_array_object; glGenVertexArrays(1, &amp;vertex_array_object); //绑定VAOglBindVertexArray(vertex_array_object); 顶点属性发送到 GPU之后我们还需要告诉 OpenGL 我们如何解释这些顶点数据。因此我们用 glVertexAttribPointer 这个函数告诉 OpenGL我们如何解释这些顶点数据。 123// 设置顶点属性指针glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE,3 * sizeof(float), (void*)0);glEnableVertexAttribArray(0); 这个函数第一个参数是我们后面会用到的顶点着色器的位置值，3 表示的是顶点属性是一个三分量的向量，第三个参数表示的是我们顶点的类型，第四个是我们是否希望数据被标准化，就是映射到 0-1 之间，第五个参数叫做步长，它表示连续顶点属性之间的间隔，因为我们这里只有顶点的位置，所以我们将步长设置为这个，表示下组数据在 3个 float之后。最后一个是数据的偏移量，这里我们的位置属性是在数组的开头，因此这里是 0，并且由于参数类型的限制，我们需要将其进行强制类型转换。而下面 Enable的函数则是表明我们开启了 0 的这个通道，默认状态下是关闭的，因此我们在这里需要开启 等到设置属性指针完成之后，我们这里需要解绑 VAO和 VBO。我们可以思考一下，为什么我们在这里要解绑 VAO和 VBO呢？一个原因是因为在防止之后再继续绑定 VAO的时候会影响当前的 VAO，另一个原因是为了使代码更加灵活规范，在渲染需要的时候我们会再绑定 VAO 123// 解绑VAO和VBOglBindVertexArray(0);glBindBuffer(GL_ARRAY_BUFFER, 0); 顶点着色器和片段着色器 这里我们给出的这两段分别是顶点着色器的源码和片段着色器的源码，这个是用 GLSL 语言来编写的，与 C 语言的风格类似。 12345678910111213141516//顶点着色器源码const char *vertex_shader_source = \"#version 330 core\\n\" \"layout (location = 0) in vec3 aPos;\\n\" // 位置变量的属性位置值为0 \"void main()\\n\" \"&#123;\\n\" \" gl_Position = vec4(aPos, 1.0);\\n\" \"&#125;\\n\\0\";//片段着色器源码const char *fragment_shader_source = \"#version 330 core\\n\" \"out vec4 FragColor;\\n\" // 输出的颜色向量 \"void main()\\n\" \"&#123;\\n\" \" FragColor = vec4(1.0f, 0.5f, 0.2f, 1.0f);\\n\" \"&#125;\\n\\0\"; 先看顶点着色器，第一行表示我们使用的是 OpenGL3.3的核心模式，第二行就是我们之前说到的位置值。Main函数中的部分就是将我们之前的顶点数据直接输出到 GLSL已经定义好的一个内建变量 gl_Position中，这个就是我们顶点着色器的输出，也就是说我们在顶点着色器这里什么都没做，就只是将顶点位置作为顶点着色器的输出 接下来是片段着色器，前面两行类似，这里的 out表示输出变量，就像之前的 in表示输入变量。然后我们这里的四分量向量就是我们之前看到的三角形是红色的来源，是一个四分量的 RGBA，那么我们也可以将其更改一下，我们输出的三角形颜色就会发生变化 有了顶点和片段着色器的源码，我们还需要编译着色器。这里我们先编译了顶点着色器，然后我们这里对其进行检测，是否成功编译，如果编译不成功就打印错误信息。片段着色器同理 123456789101112131415161718192021222324int success;char info_log[512];//顶点着色器int vertex_shader = glCreateShader(GL_VERTEX_SHADER);glShaderSource(vertex_shader, 1, &amp;vertex_shader_source, NULL);glCompileShader(vertex_shader);//检查顶点着色器是否成功编译，如果编译失败，打印错误信息glGetShaderiv(vertex_shader, GL_COMPILE_STATUS, &amp;success);if (!success)&#123; glGetShaderInfoLog(vertex_shader, 512, NULL, info_log); std::cout &lt;&lt; \"ERROR::SHADER::VERTEX::COMPILATION_FAILED\\n\"&lt;&lt; info_log &lt;&lt; std::endl;&#125;//片段着色器int fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);glShaderSource(fragment_shader, 1, &amp;fragment_shader_source,NULL);glCompileShader(fragment_shader);//检查片段着色器是否成功编译，如果编译失败，打印错误信息glGetShaderiv(fragment_shader, GL_COMPILE_STATUS, &amp;success);if (!success)&#123; glGetShaderInfoLog(fragment_shader, 512, NULL, info_log); std::cout &lt;&lt;\"ERROR::SHADER::FRAGMENT::COMPILATION_FAILED\\n\" &lt;&lt; info_log&lt;&lt; std::endl;&#125; 最后我们将顶点和片段着色器链接到一个着色器程序中，这样我们在渲染时只需要调用一个着色器程序就可以了，同样最后我们需要检测一下链接是否成功 ，若成功则删除掉顶点和片段着色器。因为在后面渲染的时候我们只需要用那个我们之前链接好的着色器程序即可，不再需要单独使用顶点和片段着色器 1234567891011121314//链接顶点和片段着色器至一个着色器程序int shader_program = glCreateProgram();glAttachShader(shader_program, vertex_shader);glAttachShader(shader_program, fragment_shader);glLinkProgram(shader_program);//检查着色器是否成功链接，如果链接失败，打印错误信息glGetProgramiv(shader_program, GL_LINK_STATUS, &amp;success);if (!success) &#123; glGetProgramInfoLog(shader_program, 512, NULL, info_log); std::cout &lt;&lt; \"ERROR::SHADER::PROGRAM::LINKING_FAILED\\n\" &lt;&lt; info_log &lt;&lt; std::endl;&#125;//删除着色器glDeleteShader(vertex_shader);glDeleteShader(fragment_shader); 渲染接下来我们进入我们的渲染阶段，当窗口没有关闭的时候我们就一直进行循环渲染。 首先我们先清空颜色缓冲，我们这里用的是上次的蓝色背景色来清空屏幕颜色缓冲，当然这里我们可以更换颜色。接下来我们使用我们之前已经链接好的着色器程序，和 VAO，来绘制三角形。绘制三角形其实只要一句话，就是这个glDrawArrays。这里的第一个参数表示我们是要绘制三角形，第二个参数表示我们顶点数组的起始索引值，第三个参数表示我们要绘制的顶点数量，这里绘制三角形我们要绘制三个顶点。绘制结束后解除绑定。最后我们会交换一下缓冲，这里我们使用的是一个双缓冲的做法，前缓冲保存着输出的图像，而渲染指令都在后缓冲中进行，当指令执行完毕后我们交换前后缓冲，最后我们还会检测是否有触发一些回调函数。 123456789101112131415// 渲染循环while (!glfwWindowShouldClose(window)) &#123; //清空颜色缓冲 glClearColor(0.0f, 0.34f, 0.57f, 1.0f); glClear(GL_COLOR_BUFFER_BIT); //使用着色器程序 glUseProgram(shader_program); //绘制三角形 glBindVertexArray(vertex_array_object); //绑定VAO glDrawArrays(GL_TRIANGLES, 0, 3); //绘制三角形 glBindVertexArray(0); //解除绑定 //交换缓冲并且检查是否有触发事件(比如键盘输入、鼠标移动等） glfwSwapBuffers(window); glfwPollEvents();&#125; 善后当我们的窗口关闭之后，我们还会进行一些善后工作，这里包括删除我们之前所创建的 VAO、VBO，以及调用 GLFW 的函数来清理所有的资源并退出程序。 123456//删除VAO和VBOglDeleteVertexArrays(1, &amp;vertex_array_object);glDeleteBuffers(1, &amp;vertex_buffer_object);//清理所有的资源并正确退出程序glfwTerminate();return 0; 大功告成！整个绘制三角形的程序就到此为止。 如果一切顺利，点击编译运行你会看到： 回顾我们回头再来梳理一遍绘制三角形流程 刚开始我们先初始化 OpenGL，接下来对我们的数据进行处理，通过 VAO、VBO将其发送至 GPU中，并设置属性指针告诉 GPU我们会如何解释这些数据，然后在着色器中通过顶点和片段着色器对数据进行处理，最后进行渲染，渲染之后做好我们的善后工作，一个三角形就绘制成功了","categories":[{"name":"OpenGL","slug":"OpenGL","permalink":"https://histevehu.com/categories/OpenGL/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"OpenGL-2:渲染窗体","slug":"OpenGL-RenderEmptyWindow","date":"2020-01-19T15:42:47.000Z","updated":"2020-01-20T00:39:21.024Z","comments":true,"path":"2020/01/19/OpenGL-RenderEmptyWindow/","link":"","permalink":"https://histevehu.com/2020/01/19/OpenGL-RenderEmptyWindow/","excerpt":"在这里我们将实现一个空窗口的渲染","text":"在这里我们将实现一个空窗口的渲染 渲染一个黑色空窗体初始化GLFW让我们先来试试能不能让 GLFW正常工作。首先，新建一个.cpp文件，然后把下面的代码粘贴到该文件的最前面 12#include &lt;glad/glad.h&gt; #include &lt;GLFW/glfw3.h&gt; 接下来我们创建 main 函数，在这个函数中我们将会实例化 GLFW窗口： 123456789int main() &#123; glfwInit(); glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3); glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3); glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE); //glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); return 0; &#125; 首先，我们在 main函数中调用 glfwInit函数来初始化 GLFW，然后我们可以使用 glfwWindowHint函数来配置 GLFW。glfwWindowHint函数的第一个参数代表选项的名称，我们可以从很多以 GLFW_开头的枚举值中选择；第二个参数接受一个整形，用来设置这个选项的值。如果你现在编译你的 cpp文件会得到大量的 undefined reference (未定义的引用)错误，也就是说你并未顺利地链接GLFW库。 由于我们是基于 OpenGL3.3来进行讨论的 ，我们将主版本号(Major)和次版本号(Minor)都设为 3。我们同样明确告诉 GLFW我们使用的是核心模式(Core-profile)。明确告诉 GLFW我们需要使用核心模式意味着我们只能使用OpenGL功能的一个子集（没有我们已不再需要的向后兼容特性）。如果使用的是 Mac OS X系统，你还需要加下面这行代码到你的初始化代码中这些配置才能起作用（将上面的代码解除注释）： 1glfwWindowHint(GLFW_OPENGL_FORWARD_COMPAT, GL_TRUE); 当然我们也可以看到 GLFW当前使用的版本号 123int Major, Minor, Rev; glfwGetVersion(&amp;Major, &amp;Minor, &amp;Rev); printf(\"GLFW %d.%d.%d initialized\\n\", Major, Minor, Rev); 窗体接下来我们创建一个窗口对象，这个窗口对象存放了所有和窗口相关的数据，而且会被 GLFW的其他函数频繁地用到。 12345678GLFWwindow* window = glfwCreateWindow(800, 600, \"window\", NULL, NULL); if (window == NULL) &#123; std::cout &lt;&lt; \"Failed to create GLFW window\" &lt;&lt; std::endl; glfwTerminate(); return -1; &#125; glfwMakeContextCurrent(window); glfwCreateWindow函数需要窗口的宽和高作为它的前两个参数。第三个参数表示这个窗口的名称（标题），这里我们使用”window”，当然你也可以使用你喜欢的名称。最后两个参数我们暂时忽略。这个函数将会返回一个GLFWwindow对象，我们会在其它的 GLFW操作中使用到。创建完窗口我们就可以通知 GLFW将我们窗口的上下文设置为当前线程的主上下文了。 GLAD在之前我们已经提到，GLAD是用来管理 OpenGL的函数指针的，所以在调用任何 OpenGL的函数之前我们需要初始化 GLAD。 12345if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) &#123; std::cout &lt;&lt; \"Failed to initialize GLAD\" &lt;&lt; std::endl; return -1; &#125; 我们给 GLAD传入了用来加载系统相关的 OpenGL函数指针地址的函数。GLFW给我们的是glfwGetProcAddress，它根据我们编译的系统定义了正确的函数。 视口在我们开始渲染之前还有一件重要的事情要做，我们必须告诉 OpenGL渲染窗口的尺寸大小，即视口(Viewport)，这样 OpenGL才只能知道怎样根据窗口大小显示数据和坐标。我们可以通过调用 glViewport函数来设置窗口的维度(Dimension)： 1glViewport(0, 0, 800, 600); glViewport函数前两个参数控制窗口左下角的位置。第三个和第四个参数控制渲染窗口的宽度和高度（像素）。我们实际上也可以将视口的维度设置为比 GLFW的维度小，这样子之后所有的 OpenGL渲染将会在一个更小的窗口中显示，这样子的话我们也可以将一些其它元素显示在 OpenGL视口之外。 然而，当用户改变窗口的大小的时候，视口也应该被调整。我们可以对窗口注册一个回调函数(Callback Function)，它会在每次窗口大小被调整的时候被调用。这个回调函数的原型如下： 12void framebuffer_size_callback(GLFWwindow* window, int width, int height); 这个帧缓冲大小函数需要一个 GLFWwindow 作为它的第一个参数，以及两个整数表示窗口的新维度。每当窗口改变大小，GLFW会调用这个函数并填充相应的参数供你处理。 我们还需要注册以下这个函数，告诉 GLFW我们希望每当窗口改变大小的时候调用上面的回调函数完成视口调整处理： 1glfwSetFramebufferSizeCallback(window, framebuffer_size_callback); 当窗口被第一次显示的时候 framebuffer_size_callback也会被调用。对于视网膜(Retina)显示屏，width和 height都会明显比原输入值更高一点。 渲染我们希望程序在我们主动关闭它之前不断绘制图像并能够接受用户输入 因此，我们需要继续在程序中添加一个while循环，我们可以把它称之为渲染循环(Render Loop)，它能在我们让 GLFW退出前一直保持运行。下面几行的代码就实现了一个简单的渲染循环： 12345while(!glfwWindowShouldClose(window)) &#123; glfwPollEvents(); glfwSwapBuffers(window); &#125; glfwWindowShouldClose 函数在我们每次循环的开始前检查一次 GLFW 是否被要求退出，如果是的话该函数返回 true然后渲染循环便结束了，之后为我们就可以关闭应用程序了。glfwPollEvents 函数检查有没有触发什么事件（比如键盘输入、鼠标移动等）、更新窗口状态，并调用对应的回调函数（可以通过回调方法手动设置）。 glfwSwapBuffers 函数会交换颜色缓冲（它是一个储存着 GLFW 窗口每一个像素颜色值的大缓冲），它在这一迭代中被用来绘制，并且将会作为输出显示在屏幕上。 双缓冲(Double Buffer)应用程序使用单缓冲绘图时可能会存在图像闪烁的问题。 这是因为生成的图像不是一下子被绘制出来的，而是按照从左到右，由上而下逐像素地绘制而成的。最终图像不是在瞬间显示给用户，而是通过一步一步生成的，这会导致渲染的结果很不真实。为了规避这些问题，我们应用双缓冲渲染窗口应用程序。前缓冲保存着最终输出的图像，它会在屏幕上显示；而所有的的渲染指令都会在后缓冲上绘制。当所有的渲染指令执行完毕后，我们交换(Swap)前缓冲和后缓冲，这样图像就立即呈显出来，之前提到的不真实感就消除了。 当渲染循环结束后我们需要正确释放/删除之前的分配的所有资源。我们可以在 main函数的最后调用 glfwTerminate 函数来完成。 12glfwTerminate(); return 0; 这样便能清理所有的资源并正确地退出应用程序。现在你可以尝试编译并运行你的应用程序了。 如果没做错的话，你将会看到一个黑色窗口。恭喜你，那就对了。 如果没有得到正确的结果，或者不知道怎样把东西放在一起，那么请参考源码： https://github.com/histevehu/OpenGL-Learning 我们会将所有的示例源码提交至此 更进一步：更换颜色！接下来，我们只需要增添一些细节，就可以改变窗体的颜色 我们要把所有的渲染操作放到渲染循环中，因为我们想让这些渲染指令在每次渲染循环迭代的时候都能被执行。代码将会是这样的： 12345678910while(!glfwWindowShouldClose(window)) &#123; // 输入 ... // 渲染指令 ... // 检查并调用事件，交换缓冲 glfwPollEvents(); glfwSwapBuffers(window); &#125; 为了测试一切都正常工作，我们使用一个自定义的颜色清空屏幕。在每个新的渲染迭代开始的时候我们总是希望清屏，否则我们仍能看见上一次迭代的渲染结果（这可能是你想要的效果，但通常这不是）。我们可以通过调用glClear函数来清空屏幕的颜色缓冲，它接受一个缓冲位(Buffer Bit)来指定要清空的缓冲，可能的缓冲位有GL_COLOR_BUFFER_BIT，GL_DEPTH_BUFFER_BIT和 GL_STENCIL_BUFFER_BIT。由于现在我们只关心颜色值，所以我们只清空颜色缓冲。 12glClearColor(0.0f, 0.34f, 0.57f, 1.0f); glClear(GL_COLOR_BUFFER_BIT); 注意，除了 glClear之外，我们还调用了 glClearColor来设置清空屏幕所用的颜色。当调用 glClear函数，清除颜色缓冲之后，整个颜色缓冲都会被填充为glClearColor里所设置的颜色。在这里，我们将屏幕设置为了一种好看的蓝色。效果如下： 预告如果一切顺利，那么这一节大功告成！ 在下面一节中，我们将渲染三角形","categories":[{"name":"OpenGL","slug":"OpenGL","permalink":"https://histevehu.com/categories/OpenGL/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"OpenGL-1:基本配置(GLFW+GLAD)","slug":"OpenGL-BasicConfig-GLFW-GLAD","date":"2020-01-19T11:25:36.000Z","updated":"2020-01-19T16:36:16.622Z","comments":true,"path":"2020/01/19/OpenGL-BasicConfig-GLFW-GLAD/","link":"","permalink":"https://histevehu.com/2020/01/19/OpenGL-BasicConfig-GLFW-GLAD/","excerpt":"这里我们将帮助你入门OpenGL第一步——基于GLFW、GLAD库的开发环境搭建配置","text":"这里我们将帮助你入门OpenGL第一步——基于GLFW、GLAD库的开发环境搭建配置 开始 GLFW 准备GLFW是一个 OpenGL的 C语言库，它提供了渲染物体所需要的最低限度的接口，它允许用户创建 OpenGL上下文，定义窗口参数以及用户的输入。 是对之前固定管线常用的 GLUT的一种改进。 下载GLFW源代码包，解压缩 https://www.glfw.org 从源代码编译库可以保证生成的库是兼容你的操作系统和硬件的，而预编译的二进制文件可能会出现兼容问题。提供源代码所产生的一个问题在于不是每个人都用相同的 IDE开发程序，因而提供的工程/解决方案文件可能和一些人的 IDE不兼容。所以人们只能从.c/.cpp和.h/.hpp文件来自己建立工程/解决方案，这是一项枯燥的工作。但因此也诞生了一个叫做 CMake的工具。 CMake是一个工程文件生成工具。用户可以使用预定义好的 CMake脚本，根据自己的需求生成对应IDE（Visual Studio, Eclipse…）的工程文件。 下载CMake https://cmake.org/download 当 CMake安装成功后，你可以选择从命令行或者 GUI启动 CMake，由于我们不想让事情变得太过复杂，我们选择用 GUI。(GUI版本CMake位于安装路径根下的bin目录中) CMake需要一个源代码目录和一个存放编译结果的目标文件目录。源代码目录我们选择 GLFW的源代码的根目录，然后我们新建一个 build 文件夹作为目标目录 点击”Configure”，只需选择目标的IDE版本，其他保持默认即可。这里以Visual Studio 2019为例 点击”Generate”生成，期间会出现红色提示，再依次点击”Configure”和”Generate”，生成成功 在 build文件夹里找到生成的 GLFW.sln 文件，用 Visual Studio 2019 打开。因为CMake已经配置好了项目，所以直接点击生成解决方案，然后编译的库 glfw3.lib（注意版本为第 3版）就会出现在 src/Debug文件夹内 库文件生成完毕，但我们需要进行需要一些配置让 IDE知道库和头文件的位置。 推荐的方式是建立一个新的单独的目录，里面包含 libs 和 include文件夹，用以包含所有OpenGL工程用到的第三方库和头文件，然后在你的 IDE 中指定这些文件夹路径。这样的好处是所有第三方库都在同一个位置 （并且可以共享至多台电脑）；缺点是需要每次新建一个工程时都配置这些目录路径。 这里以这种方法为例 新建一个文件夹，作为工程根目录。再在其中新建 libs 和 include文件夹。 进入GLFW解压缩源代码目录下的include文件夹，将其中的 GLFW 整个文件夹复制到工程根目录下的 include 文件夹中。再将刚在编译生成的库文件 glfw3.lib 复制到工程根目录下的 libs 文件夹中。 GLAD 准备到这里还没有结束，我们仍然还有一件事要做。因为 OpenGL只是一个标准/规范，具体的实现是由驱动开发商针对特定显卡实现的。由于 OpenGL驱动版本众多，它大多数函数的位置都无法在编译时确定下来，需要在运行时查询。所以任务就落在了开发者身上，开发者需要在运行时获取函数地址并将其保存在一个函数指针中供以后使用。取得地址的方法因平台而异，代码非常复杂繁琐，幸运的是有些库能简化此过程，其中 GLAD是目前最新，也是最流行的库。 进入 GLAD 的在线服务 https://glad.dav1d.de/ 将语言(Language)设置为 C/C++，规范(Specification)设置为OpenGL。在 API 选项中，选择 3.3以上的 OpenGL(gl)版本，将模式(Profile)设置为 Core，先暂时忽略拓展(Extensions)中的内容。选中生成加载器(Generate a loader)。最后点击生成(Generate)按钮来生成库文件。 随后会跳转到一个结果生成页面，点击下载 glad.zip ，解压缩 解压缩后得到其中两个目录：include 和 src。将include目录下两个文件夹（glad 和 KHR）复制到工程根目录下的 include 文件夹内。将 src 目录下的 glad.c 复制到工程根目录下。 确认如果一切顺利，现在工程根目录下有include、libs两个目录以及glad.c。 在 include 文件夹中有 GLFW、KHR、glad 三个文件夹。在 libs 文件夹中有 glfw3.lib。 配置库和头文件准备就绪，最后只需要在工程中配置这些文件路径即可。 打开 Visual Studio 2019，创建新项目（C++空项目），将位置设置为前文的工程根目录。 打开工程属性（解决方案窗口里右键项目，属性） 点击 VC++目录选项卡，在包含目录一项添加工程根目录下 include 文件夹的路径，在库目录一项添加工程根目录下 libs 文件夹的路径 点击选项卡 链接器-&gt;输入，添加依赖项，添加 glfw3.lib ，点击确定保存 在结局方案窗口，右键项目的源文件文件夹，添加现有项，将工程根目录的 glad.c 添加进工程 完成！ 如果一切顺利，至此OpenGL开发环境配置完毕。 在下一节中，我们将会实现一个空窗口的渲染，借此也得以验证你是否正确配置OpenGL的开发环境。 OpenGL-2:渲染窗体 当然，我们也会将示例代码提交至Github，如果你遇到问题可供参考： HiSteveHu::OpenGL-Learning","categories":[{"name":"OpenGL","slug":"OpenGL","permalink":"https://histevehu.com/categories/OpenGL/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"ESP8266：SmartConfig","slug":"ESP8266-SmartConfig","date":"2019-11-13T01:44:41.000Z","updated":"2020-02-08T09:57:26.553Z","comments":true,"path":"2019/11/13/ESP8266-SmartConfig/","link":"","permalink":"https://histevehu.com/2019/11/13/ESP8266-SmartConfig/","excerpt":"在之前的教程中，我们已经学习了ESP8266的基本信息及开发环境搭建。在这里我们将学习如何 通过SmartConfig配网 将ESP8266 以一种对用户更友好的方式接入互联网","text":"在之前的教程中，我们已经学习了ESP8266的基本信息及开发环境搭建。在这里我们将学习如何 通过SmartConfig配网 将ESP8266 以一种对用户更友好的方式接入互联网 前导教程如果你第一次阅读本文且之前无相关经验，建议阅读以下前导教程后再开始着手开始此教程。 ESP8266：基本配置 准备 ESPTouch iOS (注意截止到2019.11.16乐鑫尚未对iOS版本ESPTouch进行iOS13适配，可能存在问题，尚不推荐使用) https://apps.apple.com/cn/app/espressif-esptouch-aka-a-m-x/id1071176700 Android https://github.com/EspressifApp/EsptouchForAndroid/releases/download/v1.1.0/esptouch.apk 什么是 SmartConfig 配网首先，我们先来看一下为什么设备需要配网呢？ 想象一下，假如你购买了一个智能插座，想让它连接到家里的WiFi，但是智能插座又没有键盘和触摸屏此时你该怎么操作呢？对于我们而言，可以将家中的WiFi的SSID和密码写死到固件中并烧录，然而如果遇到WiFi的SSID或密码更改的情况，修改将会非常麻烦。而以上对于普通用户来说更是天方夜谭，用户体验极不友好。 我们想象中的优化目标： SSID 自动获取用户移动端（手机、平板等）所连接的WiFi的名称 密码 鉴于多数WiFi密码长度尚可且为了安全性，这是用户需要且仅需要的一项内容 此时就需要我们的智能配网模式。SmartConfig最先是TI开始研究的，其实类似的协议有很多，只是不同厂家间名称不同，乐鑫智能配网模式的名称仍为 SmartConfig 下面一张图来概括什么是SmartConfig及其原理和作用 开始1.打开Arduino,添加一下代码并烧录至ESP8266： 12345678910111213141516171819202122#include &lt;ESP8266WiFi.h&gt;void smartConfig()&#123; WiFi.mode(WIFI_STA); Serial.println(\"\\r\\nWait for Smartconfig\"); WiFi.beginSmartConfig(); while (1) &#123; delay(500); if (WiFi.smartConfigDone()) &#123; Serial.println(\"SmartConfig Success\"); Serial.printf(\"SSID:%s\\r\\n\", WiFi.SSID().c_str()); Serial.printf(\"PSW:%s\\r\\n\", WiFi.psk().c_str()); break; &#125; &#125;&#125;void setup() &#123; Serial.begin(115200); smartConfig();&#125;void loop() &#123;&#125; 确认移动端已经连接到2.4Ghz WiFi（因为ESP8266 仅支持2.4Ghz WiFi，若移动端连接到5Ghz 或其他频率WiFi则配网会失败） 打开移动端ESPTouch，输入密码并确认，移动端开始广播WiFi信息，开始配网。 3.打开Arduino串口监视器（点击主界面右上角放大镜图标），重启ESP8266。稍等片刻，可见ESP8266向串口输出WiFi的SSID和密码消息，证明配网成功","categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://histevehu.com/categories/ESP8266/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"ESP8266:基本配置","slug":"ESP8266-BasicConfiguration","date":"2019-09-13T01:44:37.000Z","updated":"2020-01-19T11:30:01.680Z","comments":true,"path":"2019/09/13/ESP8266-BasicConfiguration/","link":"","permalink":"https://histevehu.com/2019/09/13/ESP8266-BasicConfiguration/","excerpt":"这里我们将以 Adruino+ESP8266+VSCode配置 为例，展示ESP8266的入门基础配置，并实现最基本的点灯","text":"这里我们将以 Adruino+ESP8266+VSCode配置 为例，展示ESP8266的入门基础配置，并实现最基本的点灯 准备 Adruino IDE https://www.arduino.cc/en/Main/Software CH341驱动程序 http://www.wch.cn/download/CH341SER_EXE.html ESP8266 开发板 （参考购买链接） https://store.arduino.cc/usa/ https://www.espressif.com/zh-hans/products/hardware/esp8266ex/overview https://item.taobao.com/item.htm?_u=d35edijr38fd&amp;id=531755241333 一根可靠的 Micro-USB 数据线 注意线缆是具备数据传输功能的数据线，而非Micro-USB 接口的电源线，否则无法被计算机识别 若位于中国，则另需VPN以顺利完成配置 配置 CH341驱动程序打开驱动程序安装文件，安装，出现预安装成功提示后，将ESP8266与计算机连接。 (注意：线缆是具备数据传输功能的数据线，而非Micro-USB 接口的电源线，否则无法被计算机识别） 计算机将识别ESP8266并完成剩余安装。 验证驱动程序是否成功安装？可将ESP8266与电脑连接后，可通过：计算机-右键-属性-设备管理器，若在其中存在端口一项，其中包含CH340一项，则代表安装成功。 Adruino IDE 下载，安装 打开Adruino,点击“文件-首选项”，在附加开发板管理器网址中添加： https://arduino.esp8266.com/stable/package_esp8266com_index.json 点击“工具-开发板-开发板管理器”，搜索”ESP8266”,安装 若位于中国，则建议挂载VPN以顺利完成此步 点击“工具-开发板“，选择”Generic ESP8266 Module”，完成配置 启用第三方编辑器（可选）我们可以使用第三方更为强大的编辑器来替换Adruino内置编辑器，下面以VSCode为例，介绍对其基本配置： 搜索插件”Arduino”，安装 打开设置，搜索”Arduino”，更改”Arduino:Path“ 一项为Arduino安装根目录（eg:默认为 C:\\Program Files (x86)\\Arduino），其他保持默认 Ctrl+Shift+P,在命令端口输入 Arduino，选择 Arduino:Board Config 在出现的配置窗口，将开发板类型更改为 Generic ESP8266 Module(esp8266)，其他保持默认即可 可通过底端状态栏快速做出相应操作 从右往左，COM4 选项为端口选择，选择ESP8266连接所在的端口，也可检验见面CH340驱动程序是否成功安装；插座图标为串口监听开关；Generic ESP8266 Module 为所选开发板型号 Hello World！= Blink！完成上述步骤，让我们开始第一步——运行最简单的程序！ 在编程语言的学习中，第一步往往是在屏幕上打印“Hello World！”，对于单片机学习而言，第一步相对应的就是点亮ESP8266上的LED灯。 打开Arduino，点击菜单 文件-示例-Basics-Blink，我们选择其内置的示例代码快速开始 将ESP8266 连接至计算机，点击菜单 工具-端口，选择正确端口，同时确保开发板型号选择为 Generic ESP8266 Module （原因及注意事项见最后”注意“一栏） 点击菜单栏下方一条图标栏中的 上传（右箭头）图标，将程序烧录至ESP8266 若成功，则可见ESP8266将自动重启，然后LED灯间歇闪烁 大功告成！ 注意 上文提及注意开发板型号选择的原因，是因为若你选择前文 准备-ESP8266开发板 参考购买链接中第三个链接（https://item.taobao.com/item.htm?_u=d35edijr38fd&amp;id=531755241333）并购买了其**开发板+TFT液晶屏套装**，想要调用其自带库实现TFT屏幕显示功能，需要将开发板型号更改为 NodeMCU 并且LED灯将失效，显示屏与LED不可同时实现。 即选择： Generic ESP8266 Module，LED可用，TFT显示屏不可用 NodeMCU，LED灯不可用，TFT显示屏可用","categories":[{"name":"ESP8266","slug":"ESP8266","permalink":"https://histevehu.com/categories/ESP8266/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"算法：查找（Java实现）","slug":"Algorithm-Search","date":"2019-08-23T15:16:49.000Z","updated":"2019-08-29T15:16:21.395Z","comments":true,"path":"2019/08/23/Algorithm-Search/","link":"","permalink":"https://histevehu.com/2019/08/23/Algorithm-Search/","excerpt":"这里我们将展示一些常用查找算法的Java实现代码","text":"这里我们将展示一些常用查找算法的Java实现代码 符号表 二叉查找树12345678910111213141516171819public class BST&lt;Key extends Comparable&lt;Key&gt;, Value&gt;&#123; private Node root; private class Node &#123; private Key key; private Value val; private Node left, right; private int N; public Node(Key key, Value val, int N) &#123; this.key = key; this.val = val; this.N = N; &#125; &#125;&#125; 以下为二叉查找树常见功能的实现，均为类 BST 成员函数，为提高可读性特提取分段显示 123456789public int size()&#123; return size(root);&#125;private int size(Node x)&#123; return (x == null ? 0 : x.N);&#125; 123456789101112131415public Value get(Key key)&#123; return get(root, key);&#125;//在以x为根结点的子树中查找并返回key所对应的值//若不存在则返回nullprivate Value get(Node x, Key key)&#123; if (x == null) return null; int cmp = key.compareTo(x.key);//将key与根结点的key对比大小结果判断左右分支或是符合条件 if (cmp &lt; 0) return get(x.left, key); else if (cmp &gt; 0) return get(x.right, key); else return x.val;&#125; 123456789101112131415161718//查找key,若存在则更新值，否则创建新结点public void put(Key key, Value val)&#123; root = put(root, key, val);&#125;//如果key存在于以x为根结点的子树中则更新其值//否则将以key和val为新结点插入到该子树中private Node put(Node x, Key key, Value val)&#123; if (x == null) return new Node(key, val, 1); int cmp = key.compareTo(x.key); if (cmp &lt; 0) x.left = put(x.left, key, val); else if (cmp &gt; 0) x.right = put(x.right, key, val); else x.val = val; x.N = size(x.left) + size(x.right) + 1; return x;&#125; 123456789101112131415161718192021//最小键public Key min()&#123; return min(root).key;&#125;private Node min(Node x)&#123; return (x.left == null ? x : x.left);&#125;//最大键public Key max()&#123; return max(root).key;&#125;private Node max(Node x)&#123; return (x.right == null ? x : x.right);&#125; 123456789101112131415161718192021222324252627282930313233343536373839//向下取整public Key floor(Key key)&#123; Node x = floor(root, key); return (x == null ? null : x.key);&#125;private Node floor(Node x, Key key)&#123; if (x == null) return null; int cmp = key.compareTo(x.key); if (cmp == 0) return x; else if (cmp &lt; 0) return floor(x.left, key); else &#123; Node t = floor(x.right, key); return (t != null ? t : x); &#125;&#125;//向上取整public Key ceiling(Key key)&#123; Node x = ceiling(root, key); return (x == null ? null : x.key);&#125;private Node ceiling(Node x, Key key)&#123; if (x == null) return null; int cmp = key.compareTo(x.key); if (cmp == 0) return x; else if (cmp &gt; 0) return floor(x.right, key); else &#123; Node t = floor(x.left, key); return (t != null ? t : x); &#125;&#125; 1234567891011121314151617181920212223242526272829//返回排名为k的节点键public Key select(int k)&#123; return select(root, k).key;&#125;private Node select(Node x, int k)&#123; if (x == null) return null; int t = size(x.left); if (t &gt; k) return select(x.left, k); else if (t &lt; k) return select(x.right, k - t - 1); else return x;&#125;//返回小于key的键数量public int rank(Key key)&#123; return rank(root, key);&#125;private int rank(Node x, Key key)&#123; if (x == null) return 0; int cmp = key.compareTo(x.key); if (cmp &lt; 0) return rank(x.left, key); else if (cmp &gt; 0) return size(x.left) + 1 + rank(x.right, key); else return size(x.left);&#125; 1234567891011121314151617181920212223242526//删除二叉树最小结点public void delMin()&#123; root = delMin(root);&#125;private Node delMin(Node x)&#123; if (x.left == null) return x.right; x.left = delMin(x.left); x.N = size(x.left) + size(x.right) + 1; return x;&#125;//删除二叉树最大结点public void delMax()&#123; root = delMax(root);&#125;private Node delMax(Node x)&#123; if (x.right == null) return x.left; x.right = delMin(x.right ); x.N = size(x.left) + size(x.right) + 1; return x;&#125; 123456789101112131415161718192021222324//二叉树一般删除操作public void del(Key key)&#123; root = del(root, key);&#125;private Node del(Node x, Key key)&#123; if (x == null) return null; int cmp = key.compareTo(x.key); if (cmp &lt; 0) x.left = del(x.left, key); else if (cmp &gt; 0) x.right = del(x.right, key); else &#123; if (x.right == null) return x.left; if (x.left == null) return x.right; Node t = x; x = min(t.right); x.left = t.left; x.right = delMin(t.right); &#125; x.N = size(x.left) + size(x.right) + 1; return x;&#125; 1234567891011121314151617181920212223242526272829//二叉树范围查找public void print(Node x)&#123; if (x == null) return; print(x.left); StdOut.println(x.key); print(x.right);&#125;public Iterable&lt;Key&gt; keys ()&#123; return keys(min(),max());&#125;private Iterable&lt;Key&gt; keys(Key lo, Key hi)&#123; Queue &lt;Key&gt; queue=new Queue&lt;Key &gt;(); keys(root,queue,lo,hi); return queue;&#125;private void keys(Node x, Queue&lt;Key&gt; queue, Key lo, Key hi)&#123; if(x==null) return ; int cmp_lo=lo.compareTo(x.key); int cmp_hi=hi.compareTo(x.key); if(cmp_lo&lt;0) keys(x.left,queue,lo,hi); if(cmp_lo&lt;=0&amp;&amp;cmp_hi&gt;=0) queue.enqueue(x.key); if(cmp_hi&gt;0) keys(x.right,queue,lo, hi);&#125;","categories":[{"name":"算法","slug":"算法","permalink":"https://histevehu.com/categories/算法/"}],"tags":[{"name":"整理","slug":"整理","permalink":"https://histevehu.com/tags/整理/"}]},{"title":"算法：排序（Java实现）","slug":"Algorithm-Sorting","date":"2019-08-14T13:31:03.000Z","updated":"2019-08-19T15:24:12.141Z","comments":true,"path":"2019/08/14/Algorithm-Sorting/","link":"","permalink":"https://histevehu.com/2019/08/14/Algorithm-Sorting/","excerpt":"这里我们将展示一些常用排序算法的Java实现代码","text":"这里我们将展示一些常用排序算法的Java实现代码 基本函数 基本函数都被包含于类 basic_module 内12345public class basic_module &#123; public boolean isLarger(int a,int b) //若a比b大，返回true,否则返回false public boolean isSmaller(int a,int b) //若a比b小，返回true,否则返回false public void swap(int arr[],int a,int b) //输入数组及要交换的两数下标&#125; 排序算法（Java实现 - 升序） 以下语句为基本函数类 basic_module 初始化必需,若未出现则自行补上 basic_module bm=new basic_module(); 选择排序12345678910//升序basic_module bm=new basic_module(); //基本函数类basic_module初始化，下同并省略for (int i = 0; i &lt;N ; i++) &#123; int min=i; for(int j=i+1;j&lt;N;j++) &#123; if(bm.isSmaller(a[j],a[min])) min=j; &#125; if(min!=i) bm.swap(a,min,i);&#125; 插入排序123456for (int i = 1 ; i &lt;a.length ; i++) &#123; for(int j=i;(j&gt;0)&amp;&amp;(bm.isSmaller(a[j],a[j-1]));j--) &#123; bm.swap(a,j,j-1); &#125;&#125; 快速排序需要引用 包StdRandom，下载链接：Algs4.jar 1234567891011121314151617181920212223public static void sort(int a[]) &#123; StdRandom.shuffle(a); sort(a,0,a.length-1);&#125;public static void sort(int a[],int low,int high) &#123; if(low&gt;=high) return; int j=partition(a, low, high); sort(a,low,j-1); sort(a,j+1,high);&#125;public static int partition(int a[],int lo,int hi)&#123; int i=lo,j=hi+1; int v=a[lo]; basic_module bm=new basic_module(); while (true)&#123; while(bm.isSmaller(a[++i],v)) if(i==hi) break; while(bm.isLarger(a[--j],v)) if(j==lo) break; if(i&gt;=j) break; bm.swap(a, i, j); &#125; bm.swap(a, lo, j); return j;&#125; ToDo-List 归并排序 优先队列","categories":[{"name":"算法","slug":"算法","permalink":"https://histevehu.com/categories/算法/"}],"tags":[{"name":"整理","slug":"整理","permalink":"https://histevehu.com/tags/整理/"}]},{"title":"新的HiSteveHu.com!","slug":"New-HiSteveHu-com","date":"2019-08-13T16:17:30.000Z","updated":"2019-08-13T17:25:06.708Z","comments":true,"path":"2019/08/14/New-HiSteveHu-com/","link":"","permalink":"https://histevehu.com/2019/08/14/New-HiSteveHu-com/","excerpt":"距离HiSteveHu.com上线已经一年了。在这周年之际，我们也完成了对其年度维护和升级工作。 更重要的是，这是一次重大更新，一起来看看有哪些令人振奋的新内容吧！","text":"距离HiSteveHu.com上线已经一年了。在这周年之际，我们也完成了对其年度维护和升级工作。 更重要的是，这是一次重大更新，一起来看看有哪些令人振奋的新内容吧！ 更新内容 添加站内全局搜索，可根据关键字搜索全站分类、标签、归档、动态的全部内容，查找内容更高效 (支持电脑端和iPad端，不支持移动端) 为更好地展示和传播内容，汉化了原先网站中所有文章动态和大部分网站内容，并将简体中文设为今后首选语言 将主题由polarbear更换至hiero，更美，更强大。 主页根据文章数量自动分页 添加社交媒体联系方式 添加最新文章一栏，快速浏览新动态 添加标签云 全站添加“小火箭”一键到页首支持 主页文章提供快速预览和阅读全文选项 优化归档、分类、标签模块 优化全站布局排版 文章动态内提供独立悬浮的目录导航，条理更清晰 设计了新的网站图标 维护内容 域名续费 备份并打扫了一些垃圾 最后这次更新花费我们不少时间，但为了更好地展示，更高效地记录和传播，我们相信一切都是值得的。 希望你能喜欢这次更新，我们也将在新平台上提供更多有趣的内容。 最后，希望能将 histevehu.com添加到你的收藏夹中！ 谢谢！ HiSteveHu.com 团队 2019-8-14 1:20","categories":[{"name":"HiSteveHu.com","slug":"HiSteveHu-com","permalink":"https://histevehu.com/categories/HiSteveHu-com/"}],"tags":[{"name":"声明","slug":"声明","permalink":"https://histevehu.com/tags/声明/"}]},{"title":"CppToolBox(原CToolBox) Ver.0.0.0.3 更新","slug":"CppToolBox-Original-CToolBox-Ver-0-0-0-3-Update","date":"2019-04-07T10:59:46.000Z","updated":"2019-08-13T14:45:42.058Z","comments":true,"path":"2019/04/07/CppToolBox-Original-CToolBox-Ver-0-0-0-3-Update/","link":"","permalink":"https://histevehu.com/2019/04/07/CppToolBox-Original-CToolBox-Ver-0-0-0-3-Update/","excerpt":"新内容Ver.0.0.0.3 工程（原：CToolBox）从C头文件更新到C ++头文件 对 C++ 进行适配 bool file_copy(string ori, string tgt)","text":"新内容Ver.0.0.0.3 工程（原：CToolBox）从C头文件更新到C ++头文件 对 C++ 进行适配 bool file_copy(string ori, string tgt) 参数1：输入原始（输入）文件路径 参数2：输入目标（输出）文件路径 retrun true：成功 false：失败 Githubhttps://github.com/histevehu/cpptoolbox","categories":[{"name":"CPPTB","slug":"CPPTB","permalink":"https://histevehu.com/categories/CPPTB/"}],"tags":[{"name":"声明","slug":"声明","permalink":"https://histevehu.com/tags/声明/"}]},{"title":"Cpp 问题：派生类初始化时构造函如何处理基类数据成员","slug":"Cpp-Issure-About-the-initialization-of-derived-classes-in-virtual-functions","date":"2019-04-07T02:17:09.000Z","updated":"2019-08-13T14:45:28.621Z","comments":true,"path":"2019/04/07/Cpp-Issure-About-the-initialization-of-derived-classes-in-virtual-functions/","link":"","permalink":"https://histevehu.com/2019/04/07/Cpp-Issure-About-the-initialization-of-derived-classes-in-virtual-functions/","excerpt":"问题： 这是一个展示虚函数的程序，由class.h，class.cpp，main.cpp 组成。Class.h 用于声明类， class.cpp 用于定义类，main.cpp 是主程序文件。 以下是 class.h 和 class.cpp 中与问题相关的代码的一部分","text":"问题： 这是一个展示虚函数的程序，由class.h，class.cpp，main.cpp 组成。Class.h 用于声明类， class.cpp 用于定义类，main.cpp 是主程序文件。 以下是 class.h 和 class.cpp 中与问题相关的代码的一部分 class.h 12345678910111213141516171819&gt; class circle&gt; &#123;&gt; public:&gt; circle(double r);&gt; virtual double area(); //virtual fuction&gt; void show_area();&gt; protected:&gt; double radius;&gt; &#125;;&gt; &gt; class cylinder : public circle&gt; &#123;&gt; public:&gt; cylinder(double r, double h);&gt; virtual double area();&gt; private:&gt; double height;&gt; &#125;;&gt; class.cpp 12345678910&gt; circle::circle(double r) : radius(r)&gt; &#123;&gt; &#125;&gt; cylinder::cylinder(double r, double h) : circle(r), height(h) //correct&gt; &#123;&gt; &#125;&gt; cylinder::cylinder(double r, double h) : radius(r), height(h) //wrong&gt; &#123;&gt; &#125;&gt; 既然类cylinder是从类circle继承的派生类，并且类circle中的半径被声明为受保护，为什么在初始化类cylinder时不能使用 radius(r), 而要使用circle（r）？ 错误提示：radius不是非静态数据成员或类cylinder的基类 回答: 以下是一些重要规则 C ++语言规定派生类的构造函数初始化基类成员函数时必须使用初始化列表和基类构造函数 构造函数不是继承的。 因此，派生类的构造函数必须通过调用基类的构造函数来初始化基类成员。 无法在派生类初始化列表中直接初始化基类的成员。 这称为“跳跃级初始化”。 常见的派生类构造函数 12派生类类名（参数列表）：基类名（参数列表），派生类数据成员&#123;···&#125;","categories":[{"name":"Cpp","slug":"Cpp","permalink":"https://histevehu.com/categories/Cpp/"}],"tags":[{"name":"问题","slug":"问题","permalink":"https://histevehu.com/tags/问题/"}]},{"title":"三种常用排序算法的简单比较（冒泡，选择，快速）","slug":"A-simple-comparison-of-three-commonly-used-sorting-algorithms","date":"2019-03-15T15:29:54.000Z","updated":"2019-08-13T14:45:02.279Z","comments":true,"path":"2019/03/15/A-simple-comparison-of-three-commonly-used-sorting-algorithms/","link":"","permalink":"https://histevehu.com/2019/03/15/A-simple-comparison-of-three-commonly-used-sorting-algorithms/","excerpt":"我们都知道或熟悉一些常见的排序算法，但我们可能无法清楚地了解性能差距。 在这个简单的小实验中我们能初步给出答案。 这是一个小实验。 我们比较了三种常见的排序算法：冒泡排序算法，选择排序算法和快速排序算法。","text":"我们都知道或熟悉一些常见的排序算法，但我们可能无法清楚地了解性能差距。 在这个简单的小实验中我们能初步给出答案。 这是一个小实验。 我们比较了三种常见的排序算法：冒泡排序算法，选择排序算法和快速排序算法。 为了提高定时精度，CPU时钟周期（时间戳）的数量专门用于实现微秒级的定时精度。 结果出人意料并令人震惊。 随着测试数据的大小增加，冒泡和选择排序的时间急剧增加，特别是当数据达到100,000级时，冒泡、选择排序时间几乎增加到难以忍受的半分钟。 虽然快速排序比冒泡和选择排序算法更复杂，但显然它在处理大规模数据时具有优势。 因此，在处理小规模数据时，使用冒泡和选择排序显然可以提高开发效率，但在处理大型数据时，使用快速排序或其他更先进的算法是明智的。 （冒泡排序算法可以通过改进提高性能） 确实，这个小实验有太多缺陷，例如只使用少量实验数据，只测试整数数据而不是探索其他数据类型，如浮点型等。但得出的结论并不缺乏参考价值。 日后我们将做出一个更科学全面的比较实验。","categories":[{"name":"算法","slug":"算法","permalink":"https://histevehu.com/categories/算法/"}],"tags":[{"name":"实验","slug":"实验","permalink":"https://histevehu.com/tags/实验/"}]},{"title":"CToolBox: 项目建立","slug":"CToolBox-Project-Establishment","date":"2018-11-23T08:21:30.000Z","updated":"2019-08-13T14:11:02.539Z","comments":true,"path":"2018/11/23/CToolBox-Project-Establishment/","link":"","permalink":"https://histevehu.com/2018/11/23/CToolBox-Project-Establishment/","excerpt":"项目 Github 主页https://github.com/histevehu/cpptoolbox 简介为了提高编程效率，提高代码可读性并减少维护难度，我们创建了一个C头文件项目。 现在很高兴展示该项目的0.0.0.1版本。","text":"项目 Github 主页https://github.com/histevehu/cpptoolbox 简介为了提高编程效率，提高代码可读性并减少维护难度，我们创建了一个C头文件项目。 现在很高兴展示该项目的0.0.0.1版本。 用法 下载头文件 (ctb.h), 放入和你的C程序项目同一目录下. 在你的C的程序头部加入以下语句： 1#include \"ctb.h\" API sort_bubble(int array[], int total, int order) 参数1：输入整数数组 参数2：数组长度 参数3：排列顺序（1：顺序（从小到大）2：反向顺序（从大到小））其他：原始数组输出 sort_select(int array[], int total, int order) 参数1：输入整数数组 参数2：数组长度 参数3：排列顺序（1：顺序（从小到大）2：反向顺序（从大到小））其他：原始数组输出 judge_number_perfect(int num) 输入一个整数并判断它是否是一个完整的数字 返回值：1：是 0：否","categories":[{"name":"CPPTB","slug":"CPPTB","permalink":"https://histevehu.com/categories/CPPTB/"}],"tags":[{"name":"声明","slug":"声明","permalink":"https://histevehu.com/tags/声明/"}]},{"title":"如何使用Hexo和Github Pages搭建网站","slug":"Building-a-Website-with-the-Hexo-Framework-and-Github-Pages","date":"2018-11-03T16:24:28.000Z","updated":"2019-08-13T14:45:13.993Z","comments":true,"path":"2018/11/04/Building-a-Website-with-the-Hexo-Framework-and-Github-Pages/","link":"","permalink":"https://histevehu.com/2018/11/04/Building-a-Website-with-the-Hexo-Framework-and-Github-Pages/","excerpt":"简介这里我们将展示如何使用Hexo框架和Github Pages服务构建网站的方法。","text":"简介这里我们将展示如何使用Hexo框架和Github Pages服务构建网站的方法。 Hexo framework 快速，简单，高效的博客框架 Hexo Github Pages 服务 Github Pages 步骤1. Github 注册首先注册Github帐户。 如果你有一个，则可以跳过此步骤。 然后新建一个仓库作为网站存放仓库。 记住你申请时填写的Github用户名和电子邮件地址，以及新建的仓库名字。 这些将在下面使用。 2. Git, node.js 安装 Git https://git-scm.com/downloads 验证安装是否成功： 右键单击桌面，单击“Git Bash”，然后拉出一个类似的命令行窗口，表明Git已成功安装 Git 基本设置 在 Git 终端窗口, 输入： 12git config --global user.name &quot;Your Name“git config --global user.email &quot;email@example.com&quot; 输入 Github用户名 和 电子邮件地址 Node.js https://nodejs.org/en/download/ 验证安装是否成功： Win+R &gt; “cmd” &gt; “node –version”, 如果你能看到版本信息，表明Git已成功安装。 3. Hexo 安装 如果您不是中国用户，可以跳过安装 Cnpm 进入第2小步。 Cnpm 是淘宝的镜像服务，在中国的访问速度比 npm 快。 建议中国用户使用Cnpm 。 打开 Git 终端，输入以下内容进行安装： 1npm install -g cnpm --registry=https://registry.npm.taobao.org 如果你使用 Cnpm, 键入: 1cnpm install hexo 如果你不使用 Cnpm, 键入: 1npm install hexo 4. 基本配置 创建一个新文件夹作为站点根目录 打开文件夹，右键单击并选择 Git Bash Here 在 Git 终端窗口在中, 输入: 1hexo init 然后我们需要安装插件和主题，这里以hexo-theme-even主题为例，继续输入命令： 123npm install hexo-renderer-scss --savenpm install hexo-deployer-git --savegit clone https://gitee.com/xiuxiuing/hexo-theme-even themes/even 在站点根目录中找到 _ config.yml 文件 并打开它。 将文件的 deploy 和＃URL 部分的内容更改为： 1234deploy: type: git repo: https://github/username/website_repository_name.git branch: master 123#URLurl: https://username.github.io/website_repository_nameroot: /blog 例: 如果你的用户名是“histevehu”并且你的网站Github仓库名是“hi”，那么您的 repo项目和 url项目应为： 1repo: https://github/histevehu/hi.git 1url: https://histevehu.github.io/hi &lt;!&gt; 注意：冒号后面必须有空格，否则无法正确识别。 5. 部署 在 Git 终端, 继续输入： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 部署网站，第一次需要在终端中输入帐户和密码。 6. 配置Github页面服务 进入你的网站的Github仓库页面，转到 Settings 选项卡，找到Github Pages 项目，启用该服务。 您还可以绑定自定义域名。例如： 技巧1.更改主题 下载主题，例如从：https://hexo.io/themes/ 提取到网站根目录下的 themes文件夹内的新单独子文件夹中用于存放主题。 Configure themes as the theme name in _config.yml in the root directory 例： 如果你更改成名为 “hiero”的主题，那么你应该在 网站根目录的 _ config.yml 中配置 theme 项，如下所示： 1theme: hiero 在根目录右键单击，单击“Git Bash”，键入以下内容并执行： 1hexo clean &amp;&amp; hexo g &amp;&amp; hexo d 2.常用 Hexo 命令 hexo -g 生成网站 hexo -d 部署网站 hexo g -d 生成并部署网站 hexo server 打开本地服务，允许用户在本地预览网站。 P.S: 如果默认本地端口被占用，你可以在 网站根目录中的 _ config.yml 中进行修改 例 : 更改本地端口为 9090 ​ 添加以下代码块到 _config.yml 文件中： 1234server: port: 9090 compress: true header: true 然后测试一下。 在 Git Terminal 中输入命令: 1hexo server 如果终端显示此信息，则表示默认本地端口修改成功。 hexo clean 清理站点缓存，尤其是在您更改主题后应使用此命令","categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://histevehu.com/categories/Hexo/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"如何使用Google Chrome原生功能对整个网页截图","slug":"How-to-Screenshot-the-Full-Page-with-Google-Chrome-Native-Feature","date":"2018-10-26T16:49:54.000Z","updated":"2019-08-13T14:10:23.448Z","comments":true,"path":"2018/10/27/How-to-Screenshot-the-Full-Page-with-Google-Chrome-Native-Feature/","link":"","permalink":"https://histevehu.com/2018/10/27/How-to-Screenshot-the-Full-Page-with-Google-Chrome-Native-Feature/","excerpt":"简介有很多方法可以截取网页截图。 使用系统附带的屏幕截图软件或Chrome扩展程序。 在这里，我们想分享一种更方便，更先进的方法。","text":"简介有很多方法可以截取网页截图。 使用系统附带的屏幕截图软件或Chrome扩展程序。 在这里，我们想分享一种更方便，更先进的方法。 与其他方法相比，它： 1.只需要Chrome，不需要其他Chrome扩展程序2.从渲染输出，更好的拍摄质量 步骤 浏览长网页时，按 F12 进入Chrome开发者模式。 按Shift + Ctrl + P 打开命令文本框，输入命令： 1Capture full size screenshot 回车 Chrome会自动保存这个网页截图。","categories":[{"name":"Chrome","slug":"Chrome","permalink":"https://histevehu.com/categories/Chrome/"}],"tags":[{"name":"教程","slug":"教程","permalink":"https://histevehu.com/tags/教程/"}]},{"title":"VSCode C语言开发环境配置 (C)","slug":"Visualstudio-Code-Configuration-C","date":"2018-10-26T05:52:30.000Z","updated":"2019-08-13T14:46:13.612Z","comments":true,"path":"2018/10/26/Visualstudio-Code-Configuration-C/","link":"","permalink":"https://histevehu.com/2018/10/26/Visualstudio-Code-Configuration-C/","excerpt":"简介VSCode是一个轻量级，开源和流行的编辑器，支持主流编程语言。 当然，也支持C语言。 在使用之前只需要做一些配置。","text":"简介VSCode是一个轻量级，开源和流行的编辑器，支持主流编程语言。 当然，也支持C语言。 在使用之前只需要做一些配置。 步骤 在VSCode中安装Microsoft提供的C / C ++支持插件 安装 MingGW 并执行下列操作: 打开MingGW勾选下列必须组件: gdb-gcc(bin), gdb-gcc-g++(bin), 然后点击顶端菜单左上角 Installation &gt; Apply Changes 进行安装 配置系统环境变量, 将MingGW安装目录下bin文件夹的完整路径(例如：C:\\MinGW\\bin)添加到 系统变量的path 一项 重启VSCode 使用VSCode打开一个文件夹。 编写一个简单的C程序（如打印“HelloWorld！”）并将其保存为.c文件。 单击 Debug 图标，在选项卡的下拉菜单中选择 C ++（GDB），然后单击齿轮图标 。VSCode将自动在当前目录中新建.vscode文件夹并在其中生成 launch.json 启动配置文件。 注意：VSCode调试需要在打开的文件夹中完成（即首先应该用VSCode打开经过上述过程配置的文件夹，再调试其中的程序。打开一个独立的 C 程序会因为缺少.vscode目录即其中的配置文件而无法调试。这与DevCpp、C-Free等可以调试单个 C 程序不同） 打开目录下 .vscode文件夹 中自动生成的 launch.json 文件, 然后清空，用一下代码代替，保存: 1234567891011121314151617181920212223242526&#123; \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"(gdb) Launch\", \"type\": \"cppdbg\", \"request\": \"launch\", \"program\": \"$&#123;workspaceRoot&#125;/$&#123;fileBasenameNoExtension&#125;.exe\", \"args\": [], \"stopAtEntry\": false, \"cwd\": \"$&#123;workspaceRoot&#125;\", \"environment\": [], \"externalConsole\": true, \"MIMode\": \"gdb\", \"miDebuggerPath\": \"C:\\\\MinGW\\\\bin\\\\gdb.exe\", // The path of the miDebugger, note that it corresponds to the path of MinGw \"preLaunchTask\": \"gcc\", // C++:g++, C:gcc \"setupCommands\": [ &#123; \"description\": \"Enable pretty-printing for gdb\", \"text\": \"-enable-pretty-printing\", \"ignoreFailures\": true &#125; ] &#125; ]&#125; 转到刚才编写的C程序, 按 F5 进行调试，然后将出现一个消息框警告你配置任务。 单击 Debug Anyway。 从下拉菜单中选择: Create from a blank template &gt; Others. 然后VSCode将生成一个 Tasks.json 配置文件在 .vscode 目录中. 打开 Tasks.json 文件，清空，用以下代码替换，保存: 12345678910111213141516171819202122232425&#123; \"version\": \"2.0.0\", \"command\": \"gcc\", \"args\": [ \"-g\", \"$&#123;file&#125;\", \"-o\", \"$&#123;fileBasenameNoExtension&#125;.exe\" ], \"problemMatcher\": &#123; \"owner\": \"cpp\", \"fileLocation\": [ \"relative\", \"$&#123;workspaceRoot&#125;\" ], \"pattern\": &#123; \"regexp\": \"^(.*):(\\\\d+):(\\\\d+):\\\\s+(warning|error):\\\\s+(.*)$\", \"file\": 1, \"line\": 2, \"column\": 3, \"severity\": 4, \"message\": 5 &#125; &#125;&#125; 提示 由于需要为每个文件夹单独配置，因此建议将. vscode 文件夹 放在工作目录的根目录，这样就不需要逐一配置。 建议备份 .vscode文件夹（其中包含您刚刚修改的配置文件），这样当您在新路径中时，您只需将备份.vscode文件夹复制到该目录即可快速开始工作。","categories":[{"name":"VSCode","slug":"VSCode","permalink":"https://histevehu.com/categories/VSCode/"}],"tags":[{"name":"配置","slug":"配置","permalink":"https://histevehu.com/tags/配置/"}]},{"title":"READ ME","slug":"Read-Me","date":"2018-10-18T12:51:35.000Z","updated":"2019-09-13T01:38:26.172Z","comments":true,"path":"2018/10/18/Read-Me/","link":"","permalink":"https://histevehu.com/2018/10/18/Read-Me/","excerpt":"简介此页面将说明网站上基本常见内容的含义。","text":"简介此页面将说明网站上基本常见内容的含义。 标签 声明 网站事项，项目、工程事项，描述，备忘录 教程 实用有趣的课程，适合需要的人 整理 实用知识的总结归纳 配置 软件，开发环境等配置的备忘录 实验 空余时间进行的一些小活动记录 追踪 持续更新以展示一些长期计划的实施进度 问题 展示一些经典问题并给出解答","categories":[{"name":"HiSteveHu.com","slug":"HiSteveHu-com","permalink":"https://histevehu.com/categories/HiSteveHu-com/"}],"tags":[{"name":"声明","slug":"声明","permalink":"https://histevehu.com/tags/声明/"}]},{"title":"你好，世界！","slug":"Hello-World","date":"2018-10-17T12:51:35.000Z","updated":"2019-08-13T10:16:16.273Z","comments":true,"path":"2018/10/17/Hello-World/","link":"","permalink":"https://histevehu.com/2018/10/17/Hello-World/","excerpt":"HiSteveHu 网站 &amp; HEXO 框架 重构测试我们注意到我们的网站（HiSteveHu.com）发生了一些可怕的事情。 致歉前段时间暂停运行的具体原因是由于中国工业和信息化部的启动所有在中国设置的网站都应该注册的要求。 由于我们之前没有这样做，我们被迫停止运行。 解决方案为了确保网站内容和信息的自由，我们没有注册的计划。 幸运的是，我们找到了解决当前问题的出色解决方案。","text":"HiSteveHu 网站 &amp; HEXO 框架 重构测试我们注意到我们的网站（HiSteveHu.com）发生了一些可怕的事情。 致歉前段时间暂停运行的具体原因是由于中国工业和信息化部的启动所有在中国设置的网站都应该注册的要求。 由于我们之前没有这样做，我们被迫停止运行。 解决方案为了确保网站内容和信息的自由，我们没有注册的计划。 幸运的是，我们找到了解决当前问题的出色解决方案。 我们已将网站从FQIDC移至Github Page进行托管。 GitHub是世界领先的代码托管平台。我们相信它将为我们的网站带来更好的访问体验。 值得注意的是，由于GitHub服务器没有在中国大陆设置，中国用户在访问网站时可能会遇到稳定性和速度问题。但是，由于Github采用了CDN加速服务，这些缺点得以缓解。 好消息是，重新运营的新网站使用了一些新技术，详情如下。 我们已经重构了整个网站。 我们将新网站定义为一个平台，专注于共享信息技术体验，发布一些有趣的东西和自由思想的地方。 因此，这意味着我们已从原始网站删除了其他可能精彩的内容，对此我们深表歉意。但是，我们相信更有针对性的方向可以带来更高质量的内容。 还有一件事如上所述，我们在重新运行的新网站中使用了以下技术来改善整体性能和体验： Github主机/页面服务 稳定，受欢迎，安全。 HTTPS加密连接 提高连接安全性 CDN加速 提高访问速度，特别是对中国用户 HEXO框架 快速，简洁，高效的框架，使我们能够更专注于高质量的内容。 北极熊主题 一组简单的主题模板 新网站图标 …… 我们希望您喜欢这些新的变化，并将此网站添加到您的收藏夹。谢谢 ！","categories":[{"name":"HiSteveHu.com","slug":"HiSteveHu-com","permalink":"https://histevehu.com/categories/HiSteveHu-com/"}],"tags":[{"name":"声明","slug":"声明","permalink":"https://histevehu.com/tags/声明/"}]}]}